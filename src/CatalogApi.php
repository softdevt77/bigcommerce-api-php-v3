<?php
/**
 * CatalogApi
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BigCommerce API
 *
 * A Swagger Document for the BigCommmerce v3 API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\v3;

use \BigCommerce\Api\v3\Configuration;
use \BigCommerce\Api\v3\ApiClient;
use \BigCommerce\Api\v3\ApiException;
use \BigCommerce\Api\v3\ObjectSerializer;

/**
 * CatalogApi Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CatalogApi
{

    /**
     * API Client
     *
     * @var \BigCommerce\Api\v3\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BigCommerce\Api\v3\ApiClient $apiClient The api client to use
     */
    public function __construct(\BigCommerce\Api\v3\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
    }

    /**
    * Get API client
    *
    * @return \BigCommerce\Api\v3\ApiClient get the API client
    */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
    * Set the API client
    *
    * @param \BigCommerce\Api\v3\ApiClient $apiClient set the API client
    *
    * @return CatalogApi
    */
    public function setApiClient(\BigCommerce\Api\v3\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Operation catalogSummaryGet
    * 
    *
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\CatalogSummaryResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function catalogSummaryGet(array $params = [])
    {
        

        // parse inputs
        $resourcePath = "/catalog/summary";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CatalogSummaryResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CatalogSummaryResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CatalogSummaryResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createBrand
    * 
    *
    * @param \BigCommerce\Api\v3\Model\BrandPost $brand
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\BrandResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createBrand(\BigCommerce\Api\v3\Model\BrandPost $brand, array $params = [])
    {
        
        // verify the required parameter 'brand' is set
        if (!isset($brand)) {
            throw new \InvalidArgumentException('Missing the required parameter $brand when calling createBrand');
        }

        // parse inputs
        $resourcePath = "/catalog/brands";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($brand)) {
        $_tempBody = $brand;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BrandResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BrandResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BrandResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createBrandImage
    * 
    *
    * @param int $brand_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ImageResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createBrandImage($brand_id, array $params = [])
    {
        
        // verify the required parameter 'brand_id' is set
        if (!isset($brand_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling createBrandImage');
        }
        // verify the required parameter 'image_file' is set

        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);
        // path params


        if (isset($brand_id)) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // form params
        if ($image_file !== null) {
        // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
        // See: https://wiki.php.net/rfc/curl-file-upload
        if (function_exists('curl_file_create')) {
            $formParams['image_file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($image_file));
        } else {
            $formParams['image_file'] = '@' . $this->apiClient->getSerializer()->toFormValue($image_file);
        }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ImageResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ImageResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ImageResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createBrandMetafield
    * 
    *
    * @param int $brand_id
    * @param \BigCommerce\Api\v3\Model\MetafieldPost $metafield
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetafieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createBrandMetafield($brand_id, \BigCommerce\Api\v3\Model\MetafieldPost $metafield, array $params = [])
    {
        
        // verify the required parameter 'brand_id' is set
        if (!isset($brand_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling createBrandMetafield');
        }
        // verify the required parameter 'metafield' is set
        if (!isset($metafield)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling createBrandMetafield');
        }

        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($brand_id)) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
        $_tempBody = $metafield;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createBulkPricingRule
    * 
    *
    * @param int $product_id
    * @param \BigCommerce\Api\v3\Model\BulkPricingRulePost $bulk_pricing_rule
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\BulkPricingRuleResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createBulkPricingRule($product_id, \BigCommerce\Api\v3\Model\BulkPricingRulePost $bulk_pricing_rule, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createBulkPricingRule');
        }
        // verify the required parameter 'bulk_pricing_rule' is set
        if (!isset($bulk_pricing_rule)) {
            throw new \InvalidArgumentException('Missing the required parameter $bulk_pricing_rule when calling createBulkPricingRule');
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/bulk-pricing-rules";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($bulk_pricing_rule)) {
        $_tempBody = $bulk_pricing_rule;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createCategory
    * 
    *
    * @param \BigCommerce\Api\v3\Model\CategoryPost $category
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\CategoryResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createCategory(\BigCommerce\Api\v3\Model\CategoryPost $category, array $params = [])
    {
        
        // verify the required parameter 'category' is set
        if (!isset($category)) {
            throw new \InvalidArgumentException('Missing the required parameter $category when calling createCategory');
        }

        // parse inputs
        $resourcePath = "/catalog/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($category)) {
        $_tempBody = $category;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CategoryResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CategoryResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CategoryResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createCategoryImage
    * 
    *
    * @param int $category_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ImageResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createCategoryImage($category_id, array $params = [])
    {
        
        // verify the required parameter 'category_id' is set
        if (!isset($category_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling createCategoryImage');
        }
        // verify the required parameter 'image_file' is set

        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);
        // path params


        if (isset($category_id)) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // form params
        if ($image_file !== null) {
        // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
        // See: https://wiki.php.net/rfc/curl-file-upload
        if (function_exists('curl_file_create')) {
            $formParams['image_file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($image_file));
        } else {
            $formParams['image_file'] = '@' . $this->apiClient->getSerializer()->toFormValue($image_file);
        }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ImageResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ImageResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ImageResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createCategoryMetafield
    * 
    *
    * @param int $category_id
    * @param \BigCommerce\Api\v3\Model\MetafieldPost $metafield
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetafieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createCategoryMetafield($category_id, \BigCommerce\Api\v3\Model\MetafieldPost $metafield, array $params = [])
    {
        
        // verify the required parameter 'category_id' is set
        if (!isset($category_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling createCategoryMetafield');
        }
        // verify the required parameter 'metafield' is set
        if (!isset($metafield)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling createCategoryMetafield');
        }

        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($category_id)) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
        $_tempBody = $metafield;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createComplexRule
    * 
    *
    * @param int $product_id
    * @param \BigCommerce\Api\v3\Model\ComplexRulePost $complex_rule
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ComplexRuleResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createComplexRule($product_id, \BigCommerce\Api\v3\Model\ComplexRulePost $complex_rule, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createComplexRule');
        }
        // verify the required parameter 'complex_rule' is set
        if (!isset($complex_rule)) {
            throw new \InvalidArgumentException('Missing the required parameter $complex_rule when calling createComplexRule');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/complex-rules";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($complex_rule)) {
        $_tempBody = $complex_rule;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ComplexRuleResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ComplexRuleResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ComplexRuleResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createConfigurableField
    * 
    *
    * @param int $product_id
    * @param \BigCommerce\Api\v3\Model\ConfigurableFieldPost $configurable_field
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ConfigurableFieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createConfigurableField($product_id, \BigCommerce\Api\v3\Model\ConfigurableFieldPost $configurable_field, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createConfigurableField');
        }
        // verify the required parameter 'configurable_field' is set
        if (!isset($configurable_field)) {
            throw new \InvalidArgumentException('Missing the required parameter $configurable_field when calling createConfigurableField');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/configurable-fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($configurable_field)) {
        $_tempBody = $configurable_field;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createCustomField
    * 
    *
    * @param int $product_id
    * @param \BigCommerce\Api\v3\Model\CustomFieldPost $custom_field
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\CustomFieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createCustomField($product_id, \BigCommerce\Api\v3\Model\CustomFieldPost $custom_field, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createCustomField');
        }
        // verify the required parameter 'custom_field' is set
        if (!isset($custom_field)) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_field when calling createCustomField');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/custom-fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($custom_field)) {
        $_tempBody = $custom_field;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CustomFieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CustomFieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CustomFieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createModifier
    * 
    *
    * @param int $product_id
    * @param \BigCommerce\Api\v3\Model\ModifierPost $modifier
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ModifierResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createModifier($product_id, \BigCommerce\Api\v3\Model\ModifierPost $modifier, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createModifier');
        }
        // verify the required parameter 'modifier' is set
        if (!isset($modifier)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier when calling createModifier');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($modifier)) {
        $_tempBody = $modifier;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createModifierImage
    * 
    *
    * @param int $product_id
    * @param int $modifier_id
    * @param int $value_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ImageResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createModifierImage($product_id, $modifier_id, $value_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createModifierImage');
        }
        // verify the required parameter 'modifier_id' is set
        if (!isset($modifier_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling createModifierImage');
        }
        // verify the required parameter 'value_id' is set
        if (!isset($value_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling createModifierImage');
        }
        // verify the required parameter 'image_file' is set

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($modifier_id)) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }

        // path params


        if (isset($value_id)) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // form params
        if ($image_file !== null) {
        // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
        // See: https://wiki.php.net/rfc/curl-file-upload
        if (function_exists('curl_file_create')) {
            $formParams['image_file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($image_file));
        } else {
            $formParams['image_file'] = '@' . $this->apiClient->getSerializer()->toFormValue($image_file);
        }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ImageResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ImageResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ImageResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createModifierValue
    * 
    *
    * @param int $product_id
    * @param int $modifier_id
    * @param \BigCommerce\Api\v3\Model\ModifierValuePost $modifier_value
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ModifierValueResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createModifierValue($product_id, $modifier_id, \BigCommerce\Api\v3\Model\ModifierValuePost $modifier_value, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createModifierValue');
        }
        // verify the required parameter 'modifier_id' is set
        if (!isset($modifier_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling createModifierValue');
        }
        // verify the required parameter 'modifier_value' is set
        if (!isset($modifier_value)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_value when calling createModifierValue');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($modifier_id)) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($modifier_value)) {
        $_tempBody = $modifier_value;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierValueResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierValueResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierValueResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createOption
    * 
    *
    * @param int $product_id
    * @param \BigCommerce\Api\v3\Model\OptionPost $option
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\OptionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createOption($product_id, \BigCommerce\Api\v3\Model\OptionPost $option, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createOption');
        }
        // verify the required parameter 'option' is set
        if (!isset($option)) {
            throw new \InvalidArgumentException('Missing the required parameter $option when calling createOption');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($option)) {
        $_tempBody = $option;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createOptionValue
    * 
    *
    * @param int $product_id
    * @param int $option_id
    * @param \BigCommerce\Api\v3\Model\OptionValuePost $option_value
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\OptionValueResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createOptionValue($product_id, $option_id, \BigCommerce\Api\v3\Model\OptionValuePost $option_value, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createOptionValue');
        }
        // verify the required parameter 'option_id' is set
        if (!isset($option_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling createOptionValue');
        }
        // verify the required parameter 'option_value' is set
        if (!isset($option_value)) {
            throw new \InvalidArgumentException('Missing the required parameter $option_value when calling createOptionValue');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}/values";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($option_id)) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($option_value)) {
        $_tempBody = $option_value;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionValueResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionValueResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionValueResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createProduct
    * 
    *
    * @param \BigCommerce\Api\v3\Model\ProductPost $product
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createProduct(\BigCommerce\Api\v3\Model\ProductPost $product, array $params = [])
    {
        
        // verify the required parameter 'product' is set
        if (!isset($product)) {
            throw new \InvalidArgumentException('Missing the required parameter $product when calling createProduct');
        }

        // parse inputs
        $resourcePath = "/catalog/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product)) {
        $_tempBody = $product;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createProductImage
    * 
    *
    * @param int $product_id
    * @param \BigCommerce\Api\v3\Model\ProductImagePost $product_image
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductImageResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createProductImage($product_id, \BigCommerce\Api\v3\Model\ProductImagePost $product_image, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createProductImage');
        }
        // verify the required parameter 'product_image' is set
        if (!isset($product_image)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_image when calling createProductImage');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/images";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product_image)) {
        $_tempBody = $product_image;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductImageResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductImageResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductImageResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createProductMetafield
    * 
    *
    * @param int $product_id
    * @param \BigCommerce\Api\v3\Model\MetafieldPost $metafield
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetafieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createProductMetafield($product_id, \BigCommerce\Api\v3\Model\MetafieldPost $metafield, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createProductMetafield');
        }
        // verify the required parameter 'metafield' is set
        if (!isset($metafield)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling createProductMetafield');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
        $_tempBody = $metafield;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createProductReview
    * 
    *
    * @param int $product_id
    * @param \BigCommerce\Api\v3\Model\ProductReviewPost $product_review
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductReviewResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createProductReview($product_id, \BigCommerce\Api\v3\Model\ProductReviewPost $product_review, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createProductReview');
        }
        // verify the required parameter 'product_review' is set
        if (!isset($product_review)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_review when calling createProductReview');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/reviews";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product_review)) {
        $_tempBody = $product_review;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductReviewResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductReviewResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductReviewResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createProductVideo
    * 
    *
    * @param int $product_id
    * @param \BigCommerce\Api\v3\Model\ProductVideoPost $product_video
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductVideoResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createProductVideo($product_id, \BigCommerce\Api\v3\Model\ProductVideoPost $product_video, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createProductVideo');
        }
        // verify the required parameter 'product_video' is set
        if (!isset($product_video)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_video when calling createProductVideo');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/videos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product_video)) {
        $_tempBody = $product_video;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductVideoResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductVideoResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductVideoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createVariant
    * 
    *
    * @param int $product_id
    * @param \BigCommerce\Api\v3\Model\VariantPost $variant
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\VariantResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createVariant($product_id, \BigCommerce\Api\v3\Model\VariantPost $variant, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createVariant');
        }
        // verify the required parameter 'variant' is set
        if (!isset($variant)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant when calling createVariant');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($variant)) {
        $_tempBody = $variant;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\VariantResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\VariantResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\VariantResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createVariantImage
    * 
    *
    * @param int $product_id
    * @param int $variant_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ImageResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createVariantImage($product_id, $variant_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createVariantImage');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling createVariantImage');
        }
        // verify the required parameter 'image_file' is set

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // form params
        if ($image_file !== null) {
        // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
        // See: https://wiki.php.net/rfc/curl-file-upload
        if (function_exists('curl_file_create')) {
            $formParams['image_file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($image_file));
        } else {
            $formParams['image_file'] = '@' . $this->apiClient->getSerializer()->toFormValue($image_file);
        }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ImageResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ImageResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ImageResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation createVariantMetafield
    * 
    *
    * @param int $product_id
    * @param int $variant_id
    * @param \BigCommerce\Api\v3\Model\MetafieldPost $metafield
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetafieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createVariantMetafield($product_id, $variant_id, \BigCommerce\Api\v3\Model\MetafieldPost $metafield, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createVariantMetafield');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling createVariantMetafield');
        }
        // verify the required parameter 'metafield' is set
        if (!isset($metafield)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling createVariantMetafield');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
        $_tempBody = $metafield;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteBrandById
    * 
    *
    * @param int $brand_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteBrandById($brand_id, array $params = [])
    {
        
        // verify the required parameter 'brand_id' is set
        if (!isset($brand_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling deleteBrandById');
        }

        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($brand_id)) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteBrandImage
    * 
    *
    * @param int $brand_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteBrandImage($brand_id, array $params = [])
    {
        
        // verify the required parameter 'brand_id' is set
        if (!isset($brand_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling deleteBrandImage');
        }

        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($brand_id)) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteBrandMetafieldById
    * 
    *
    * @param int $metafield_id
    * @param int $brand_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteBrandMetafieldById($metafield_id, $brand_id, array $params = [])
    {
        
        // verify the required parameter 'metafield_id' is set
        if (!isset($metafield_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling deleteBrandMetafieldById');
        }
        // verify the required parameter 'brand_id' is set
        if (!isset($brand_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling deleteBrandMetafieldById');
        }

        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($metafield_id)) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }

        // path params


        if (isset($brand_id)) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteBrands
    * 
    *
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteBrands(array $params = [])
    {
        
        if (isset($params['name'])) {
            $name = $params['name'];
        }
        if (isset($params['page_title'])) {
            $page_title = $params['page_title'];
        }

        // parse inputs
        $resourcePath = "/catalog/brands";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($name)) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params

        if (isset($page_title)) {
            $queryParams['page_title'] = $this->apiClient->getSerializer()->toQueryValue($page_title);
        }        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteBulkPricingRuleById
    * 
    *
    * @param int $product_id
    * @param int $bulk_pricing_rule_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteBulkPricingRuleById($product_id, $bulk_pricing_rule_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteBulkPricingRuleById');
        }
        // verify the required parameter 'bulk_pricing_rule_id' is set
        if (!isset($bulk_pricing_rule_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $bulk_pricing_rule_id when calling deleteBulkPricingRuleById');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($bulk_pricing_rule_id)) {
            $resourcePath = str_replace(
                "{" . "bulk_pricing_rule_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bulk_pricing_rule_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteCategories
    * 
    *
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteCategories(array $params = [])
    {
        
        if (isset($params['name'])) {
            $name = $params['name'];
        }
        if (isset($params['parent_id'])) {
            $parent_id = $params['parent_id'];
        }
        if (isset($params['page_title'])) {
            $page_title = $params['page_title'];
        }
        if (isset($params['keyword'])) {
            $keyword = $params['keyword'];
        }
        if (isset($params['is_visible'])) {
            $is_visible = $params['is_visible'];
        }

        // parse inputs
        $resourcePath = "/catalog/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($name)) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params

        if (isset($parent_id)) {
            $queryParams['parent_id'] = $this->apiClient->getSerializer()->toQueryValue($parent_id);
        }
        // query params

        if (isset($page_title)) {
            $queryParams['page_title'] = $this->apiClient->getSerializer()->toQueryValue($page_title);
        }
        // query params

        if (isset($keyword)) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }
        // query params

        if (isset($is_visible)) {
            $queryParams['is_visible'] = $this->apiClient->getSerializer()->toQueryValue($is_visible);
        }        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteCategoryById
    * 
    *
    * @param int $category_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteCategoryById($category_id, array $params = [])
    {
        
        // verify the required parameter 'category_id' is set
        if (!isset($category_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling deleteCategoryById');
        }

        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($category_id)) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteCategoryImage
    * 
    *
    * @param int $category_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteCategoryImage($category_id, array $params = [])
    {
        
        // verify the required parameter 'category_id' is set
        if (!isset($category_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling deleteCategoryImage');
        }

        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($category_id)) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteCategoryMetafieldById
    * 
    *
    * @param int $metafield_id
    * @param int $category_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteCategoryMetafieldById($metafield_id, $category_id, array $params = [])
    {
        
        // verify the required parameter 'metafield_id' is set
        if (!isset($metafield_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling deleteCategoryMetafieldById');
        }
        // verify the required parameter 'category_id' is set
        if (!isset($category_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling deleteCategoryMetafieldById');
        }

        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($metafield_id)) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }

        // path params


        if (isset($category_id)) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteComplexRuleById
    * 
    *
    * @param int $product_id
    * @param int $complex_rule_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteComplexRuleById($product_id, $complex_rule_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteComplexRuleById');
        }
        // verify the required parameter 'complex_rule_id' is set
        if (!isset($complex_rule_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $complex_rule_id when calling deleteComplexRuleById');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/complex-rules/{complex_rule_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($complex_rule_id)) {
            $resourcePath = str_replace(
                "{" . "complex_rule_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($complex_rule_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteConfigurableFieldById
    * 
    *
    * @param int $product_id
    * @param int $configurable_field_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteConfigurableFieldById($product_id, $configurable_field_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteConfigurableFieldById');
        }
        // verify the required parameter 'configurable_field_id' is set
        if (!isset($configurable_field_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $configurable_field_id when calling deleteConfigurableFieldById');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/configurable-fields/{configurable_field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($configurable_field_id)) {
            $resourcePath = str_replace(
                "{" . "configurable_field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($configurable_field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteCustomFieldById
    * 
    *
    * @param int $product_id
    * @param int $custom_field_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteCustomFieldById($product_id, $custom_field_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteCustomFieldById');
        }
        // verify the required parameter 'custom_field_id' is set
        if (!isset($custom_field_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_field_id when calling deleteCustomFieldById');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/custom-fields/{custom_field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($custom_field_id)) {
            $resourcePath = str_replace(
                "{" . "custom_field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($custom_field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteModifierById
    * 
    *
    * @param int $product_id
    * @param int $modifier_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteModifierById($product_id, $modifier_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteModifierById');
        }
        // verify the required parameter 'modifier_id' is set
        if (!isset($modifier_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling deleteModifierById');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($modifier_id)) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteModifierImage
    * 
    *
    * @param int $product_id
    * @param int $modifier_id
    * @param int $value_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteModifierImage($product_id, $modifier_id, $value_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteModifierImage');
        }
        // verify the required parameter 'modifier_id' is set
        if (!isset($modifier_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling deleteModifierImage');
        }
        // verify the required parameter 'value_id' is set
        if (!isset($value_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling deleteModifierImage');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($modifier_id)) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }

        // path params


        if (isset($value_id)) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteModifierValueById
    * 
    *
    * @param int $product_id
    * @param int $modifier_id
    * @param int $value_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteModifierValueById($product_id, $modifier_id, $value_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteModifierValueById');
        }
        // verify the required parameter 'modifier_id' is set
        if (!isset($modifier_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling deleteModifierValueById');
        }
        // verify the required parameter 'value_id' is set
        if (!isset($value_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling deleteModifierValueById');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($modifier_id)) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }

        // path params


        if (isset($value_id)) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteOptionById
    * 
    *
    * @param int $product_id
    * @param int $option_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteOptionById($product_id, $option_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteOptionById');
        }
        // verify the required parameter 'option_id' is set
        if (!isset($option_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling deleteOptionById');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($option_id)) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteOptionValueById
    * 
    *
    * @param int $product_id
    * @param int $option_id
    * @param int $value_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteOptionValueById($product_id, $option_id, $value_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteOptionValueById');
        }
        // verify the required parameter 'option_id' is set
        if (!isset($option_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling deleteOptionValueById');
        }
        // verify the required parameter 'value_id' is set
        if (!isset($value_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling deleteOptionValueById');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}/values/{value_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($option_id)) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }

        // path params


        if (isset($value_id)) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteProductById
    * 
    *
    * @param int $product_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteProductById($product_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteProductById');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteProductImage
    * 
    *
    * @param int $product_id
    * @param int $image_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteProductImage($product_id, $image_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteProductImage');
        }
        // verify the required parameter 'image_id' is set
        if (!isset($image_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $image_id when calling deleteProductImage');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/images/{image_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($image_id)) {
            $resourcePath = str_replace(
                "{" . "image_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($image_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteProductMetafieldById
    * 
    *
    * @param int $metafield_id
    * @param int $product_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteProductMetafieldById($metafield_id, $product_id, array $params = [])
    {
        
        // verify the required parameter 'metafield_id' is set
        if (!isset($metafield_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling deleteProductMetafieldById');
        }
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteProductMetafieldById');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($metafield_id)) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }

        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteProductReview
    * 
    *
    * @param int $product_id
    * @param int $review_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteProductReview($product_id, $review_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteProductReview');
        }
        // verify the required parameter 'review_id' is set
        if (!isset($review_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $review_id when calling deleteProductReview');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/reviews/{review_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($review_id)) {
            $resourcePath = str_replace(
                "{" . "review_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($review_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteProductVideo
    * 
    *
    * @param int $product_id
    * @param int $video_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteProductVideo($product_id, $video_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteProductVideo');
        }
        // verify the required parameter 'video_id' is set
        if (!isset($video_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $video_id when calling deleteProductVideo');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/videos/{video_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($video_id)) {
            $resourcePath = str_replace(
                "{" . "video_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($video_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteProducts
    * 
    *
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteProducts(array $params = [])
    {
        
        if (isset($params['name'])) {
            $name = $params['name'];
        }
        if (isset($params['sku'])) {
            $sku = $params['sku'];
        }
        if (isset($params['price'])) {
            $price = $params['price'];
        }
        if (isset($params['weight'])) {
            $weight = $params['weight'];
        }
        if (isset($params['condition'])) {
            $condition = $params['condition'];
        }
        if (isset($params['brand_id'])) {
            $brand_id = $params['brand_id'];
        }
        if (isset($params['date_modified'])) {
            $date_modified = $params['date_modified'];
        }
        if (isset($params['date_last_imported'])) {
            $date_last_imported = $params['date_last_imported'];
        }
        if (isset($params['is_visible'])) {
            $is_visible = $params['is_visible'];
        }
        if (isset($params['is_featured'])) {
            $is_featured = $params['is_featured'];
        }
        if (isset($params['inventory_level'])) {
            $inventory_level = $params['inventory_level'];
        }
        if (isset($params['total_sold'])) {
            $total_sold = $params['total_sold'];
        }
        if (isset($params['type'])) {
            $type = $params['type'];
        }
        if (isset($params['categories'])) {
            $categories = $params['categories'];
        }
        if (isset($params['keyword'])) {
            $keyword = $params['keyword'];
        }

        // parse inputs
        $resourcePath = "/catalog/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($name)) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params

        if (isset($sku)) {
            $queryParams['sku'] = $this->apiClient->getSerializer()->toQueryValue($sku);
        }
        // query params

        if (isset($price)) {
            $queryParams['price'] = $this->apiClient->getSerializer()->toQueryValue($price);
        }
        // query params

        if (isset($weight)) {
            $queryParams['weight'] = $this->apiClient->getSerializer()->toQueryValue($weight);
        }
        // query params

        if (isset($condition)) {
            $queryParams['condition'] = $this->apiClient->getSerializer()->toQueryValue($condition);
        }
        // query params

        if (isset($brand_id)) {
            $queryParams['brand_id'] = $this->apiClient->getSerializer()->toQueryValue($brand_id);
        }
        // query params

        if (isset($date_modified)) {
            $queryParams['date_modified'] = $this->apiClient->getSerializer()->toQueryValue($date_modified);
        }
        // query params

        if (isset($date_last_imported)) {
            $queryParams['date_last_imported'] = $this->apiClient->getSerializer()->toQueryValue($date_last_imported);
        }
        // query params

        if (isset($is_visible)) {
            $queryParams['is_visible'] = $this->apiClient->getSerializer()->toQueryValue($is_visible);
        }
        // query params

        if (isset($is_featured)) {
            $queryParams['is_featured'] = $this->apiClient->getSerializer()->toQueryValue($is_featured);
        }
        // query params

        if (isset($inventory_level)) {
            $queryParams['inventory_level'] = $this->apiClient->getSerializer()->toQueryValue($inventory_level);
        }
        // query params

        if (isset($total_sold)) {
            $queryParams['total_sold'] = $this->apiClient->getSerializer()->toQueryValue($total_sold);
        }
        // query params

        if (isset($type)) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params

        if (isset($categories)) {
            $queryParams['categories'] = $this->apiClient->getSerializer()->toQueryValue($categories);
        }
        // query params

        if (isset($keyword)) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteVariantById
    * 
    *
    * @param int $product_id
    * @param int $variant_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteVariantById($product_id, $variant_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteVariantById');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling deleteVariantById');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteVariantMetafieldById
    * 
    *
    * @param int $metafield_id
    * @param int $product_id
    * @param int $variant_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteVariantMetafieldById($metafield_id, $product_id, $variant_id, array $params = [])
    {
        
        // verify the required parameter 'metafield_id' is set
        if (!isset($metafield_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling deleteVariantMetafieldById');
        }
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteVariantMetafieldById');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling deleteVariantMetafieldById');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($metafield_id)) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }

        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation getBrandById
    * 
    *
    * @param int $brand_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\BrandResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getBrandById($brand_id, array $params = [])
    {
        
        // verify the required parameter 'brand_id' is set
        if (!isset($brand_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling getBrandById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($brand_id)) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BrandResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BrandResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BrandResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getBrandMetafieldByBrandId
    * 
    *
    * @param int $metafield_id
    * @param int $brand_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetafieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getBrandMetafieldByBrandId($metafield_id, $brand_id, array $params = [])
    {
        
        // verify the required parameter 'metafield_id' is set
        if (!isset($metafield_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling getBrandMetafieldByBrandId');
        }
        // verify the required parameter 'brand_id' is set
        if (!isset($brand_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling getBrandMetafieldByBrandId');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($metafield_id)) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }

        // path params


        if (isset($brand_id)) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getBrandMetafieldsByBrandId
    * 
    *
    * @param int $brand_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetaFieldCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getBrandMetafieldsByBrandId($brand_id, array $params = [])
    {
        
        // verify the required parameter 'brand_id' is set
        if (!isset($brand_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling getBrandMetafieldsByBrandId');
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }
        if (isset($params['key'])) {
            $key = $params['key'];
        }
        if (isset($params['namespace'])) {
            $namespace = $params['namespace'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params

        if (isset($key)) {
            $queryParams['key'] = $this->apiClient->getSerializer()->toQueryValue($key);
        }
        // query params

        if (isset($namespace)) {
            $queryParams['namespace'] = $this->apiClient->getSerializer()->toQueryValue($namespace);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($brand_id)) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getBrands
    * 
    *
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\BrandCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getBrands(array $params = [])
    {
        
        if (isset($params['name'])) {
            $name = $params['name'];
        }
        if (isset($params['page_title'])) {
            $page_title = $params['page_title'];
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/brands";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($name)) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params

        if (isset($page_title)) {
            $queryParams['page_title'] = $this->apiClient->getSerializer()->toQueryValue($page_title);
        }
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BrandCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BrandCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BrandCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getBulkPricingRuleById
    * 
    *
    * @param int $product_id
    * @param int $bulk_pricing_rule_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\BulkPricingRuleResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getBulkPricingRuleById($product_id, $bulk_pricing_rule_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getBulkPricingRuleById');
        }
        // verify the required parameter 'bulk_pricing_rule_id' is set
        if (!isset($bulk_pricing_rule_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $bulk_pricing_rule_id when calling getBulkPricingRuleById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($bulk_pricing_rule_id)) {
            $resourcePath = str_replace(
                "{" . "bulk_pricing_rule_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bulk_pricing_rule_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getBulkPricingRules
    * 
    *
    * @param int $product_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\BulkPricingRuleCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getBulkPricingRules($product_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getBulkPricingRules');
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/bulk-pricing-rules";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BulkPricingRuleCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BulkPricingRuleCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BulkPricingRuleCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getCategories
    * 
    *
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\CategoryCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getCategories(array $params = [])
    {
        
        if (isset($params['name'])) {
            $name = $params['name'];
        }
        if (isset($params['parent_id'])) {
            $parent_id = $params['parent_id'];
        }
        if (isset($params['page_title'])) {
            $page_title = $params['page_title'];
        }
        if (isset($params['keyword'])) {
            $keyword = $params['keyword'];
        }
        if (isset($params['is_visible'])) {
            $is_visible = $params['is_visible'];
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($name)) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params

        if (isset($parent_id)) {
            $queryParams['parent_id'] = $this->apiClient->getSerializer()->toQueryValue($parent_id);
        }
        // query params

        if (isset($page_title)) {
            $queryParams['page_title'] = $this->apiClient->getSerializer()->toQueryValue($page_title);
        }
        // query params

        if (isset($keyword)) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }
        // query params

        if (isset($is_visible)) {
            $queryParams['is_visible'] = $this->apiClient->getSerializer()->toQueryValue($is_visible);
        }
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CategoryCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CategoryCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CategoryCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getCategoryById
    * 
    *
    * @param int $category_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\CategoryResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getCategoryById($category_id, array $params = [])
    {
        
        // verify the required parameter 'category_id' is set
        if (!isset($category_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling getCategoryById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($category_id)) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CategoryResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CategoryResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CategoryResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getCategoryMetafieldByCategoryId
    * 
    *
    * @param int $metafield_id
    * @param int $category_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetafieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getCategoryMetafieldByCategoryId($metafield_id, $category_id, array $params = [])
    {
        
        // verify the required parameter 'metafield_id' is set
        if (!isset($metafield_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling getCategoryMetafieldByCategoryId');
        }
        // verify the required parameter 'category_id' is set
        if (!isset($category_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling getCategoryMetafieldByCategoryId');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($metafield_id)) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }

        // path params


        if (isset($category_id)) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getCategoryMetafieldsByCategoryId
    * 
    *
    * @param int $category_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetaFieldCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getCategoryMetafieldsByCategoryId($category_id, array $params = [])
    {
        
        // verify the required parameter 'category_id' is set
        if (!isset($category_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling getCategoryMetafieldsByCategoryId');
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }
        if (isset($params['key'])) {
            $key = $params['key'];
        }
        if (isset($params['namespace'])) {
            $namespace = $params['namespace'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params

        if (isset($key)) {
            $queryParams['key'] = $this->apiClient->getSerializer()->toQueryValue($key);
        }
        // query params

        if (isset($namespace)) {
            $queryParams['namespace'] = $this->apiClient->getSerializer()->toQueryValue($namespace);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($category_id)) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getCategoryTree
    * 
    *
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\CategoryTreeCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getCategoryTree(array $params = [])
    {
        

        // parse inputs
        $resourcePath = "/catalog/categories/tree";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CategoryTreeCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CategoryTreeCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CategoryTreeCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getComplexRuleById
    * 
    *
    * @param int $product_id
    * @param int $complex_rule_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ComplexRuleResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getComplexRuleById($product_id, $complex_rule_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getComplexRuleById');
        }
        // verify the required parameter 'complex_rule_id' is set
        if (!isset($complex_rule_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $complex_rule_id when calling getComplexRuleById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/complex-rules/{complex_rule_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($complex_rule_id)) {
            $resourcePath = str_replace(
                "{" . "complex_rule_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($complex_rule_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ComplexRuleResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ComplexRuleResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ComplexRuleResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getComplexRules
    * 
    *
    * @param int $product_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ComplexRuleCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getComplexRules($product_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getComplexRules');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/complex-rules";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ComplexRuleCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ComplexRuleCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ComplexRuleCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getConfigurableFieldById
    * 
    *
    * @param int $product_id
    * @param int $configurable_field_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ConfigurableFieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getConfigurableFieldById($product_id, $configurable_field_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getConfigurableFieldById');
        }
        // verify the required parameter 'configurable_field_id' is set
        if (!isset($configurable_field_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $configurable_field_id when calling getConfigurableFieldById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/configurable-fields/{configurable_field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($configurable_field_id)) {
            $resourcePath = str_replace(
                "{" . "configurable_field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($configurable_field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getConfigurableFields
    * 
    *
    * @param int $product_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ConfigurableFieldCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getConfigurableFields($product_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getConfigurableFields');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/configurable-fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ConfigurableFieldCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ConfigurableFieldCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ConfigurableFieldCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getCustomFieldById
    * 
    *
    * @param int $product_id
    * @param int $custom_field_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\CustomFieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getCustomFieldById($product_id, $custom_field_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getCustomFieldById');
        }
        // verify the required parameter 'custom_field_id' is set
        if (!isset($custom_field_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_field_id when calling getCustomFieldById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/custom-fields/{custom_field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($custom_field_id)) {
            $resourcePath = str_replace(
                "{" . "custom_field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($custom_field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CustomFieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CustomFieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CustomFieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getCustomFields
    * 
    *
    * @param int $product_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\CustomFieldCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getCustomFields($product_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getCustomFields');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/custom-fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CustomFieldCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CustomFieldCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CustomFieldCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getModifierById
    * 
    *
    * @param int $product_id
    * @param int $modifier_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ModifierResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getModifierById($product_id, $modifier_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getModifierById');
        }
        // verify the required parameter 'modifier_id' is set
        if (!isset($modifier_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling getModifierById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($modifier_id)) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getModifierValueById
    * 
    *
    * @param int $product_id
    * @param int $modifier_id
    * @param int $value_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ModifierValueResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getModifierValueById($product_id, $modifier_id, $value_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getModifierValueById');
        }
        // verify the required parameter 'modifier_id' is set
        if (!isset($modifier_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling getModifierValueById');
        }
        // verify the required parameter 'value_id' is set
        if (!isset($value_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling getModifierValueById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($modifier_id)) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }

        // path params


        if (isset($value_id)) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierValueResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierValueResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierValueResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getModifierValues
    * 
    *
    * @param int $product_id
    * @param int $modifier_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ModifierValueCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getModifierValues($product_id, $modifier_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getModifierValues');
        }
        // verify the required parameter 'modifier_id' is set
        if (!isset($modifier_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling getModifierValues');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($modifier_id)) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierValueCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierValueCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierValueCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getModifiers
    * 
    *
    * @param int $product_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ModifierCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getModifiers($product_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getModifiers');
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getOptionById
    * 
    *
    * @param int $product_id
    * @param int $option_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\OptionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getOptionById($product_id, $option_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getOptionById');
        }
        // verify the required parameter 'option_id' is set
        if (!isset($option_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling getOptionById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($option_id)) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getOptionValueById
    * 
    *
    * @param int $product_id
    * @param int $option_id
    * @param int $value_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\OptionValueResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getOptionValueById($product_id, $option_id, $value_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getOptionValueById');
        }
        // verify the required parameter 'option_id' is set
        if (!isset($option_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling getOptionValueById');
        }
        // verify the required parameter 'value_id' is set
        if (!isset($value_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling getOptionValueById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}/values/{value_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($option_id)) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }

        // path params


        if (isset($value_id)) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionValueResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionValueResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionValueResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getOptionValues
    * 
    *
    * @param int $product_id
    * @param int $option_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\OptionValueCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getOptionValues($product_id, $option_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getOptionValues');
        }
        // verify the required parameter 'option_id' is set
        if (!isset($option_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling getOptionValues');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}/values";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($option_id)) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionValueCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionValueCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionValueCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getOptions
    * 
    *
    * @param int $product_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\OptionCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getOptions($product_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getOptions');
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getProductById
    * 
    *
    * @param int $product_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getProductById($product_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductById');
        }
        if (isset($params['include'])) {
            $include = $params['include'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }
        if (isset($params['price_list_id'])) {
            $price_list_id = $params['price_list_id'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include)) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // query params

        if (isset($price_list_id)) {
            $queryParams['price_list_id'] = $this->apiClient->getSerializer()->toQueryValue($price_list_id);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getProductImageById
    * 
    *
    * @param int $product_id
    * @param int $image_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductImageResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getProductImageById($product_id, $image_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductImageById');
        }
        // verify the required parameter 'image_id' is set
        if (!isset($image_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $image_id when calling getProductImageById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/images/{image_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($image_id)) {
            $resourcePath = str_replace(
                "{" . "image_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($image_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductImageResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductImageResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductImageResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getProductImages
    * 
    *
    * @param int $product_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductImageCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getProductImages($product_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductImages');
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/images";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductImageCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductImageCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductImageCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getProductMetafieldByProductId
    * 
    *
    * @param int $metafield_id
    * @param int $product_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetafieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getProductMetafieldByProductId($metafield_id, $product_id, array $params = [])
    {
        
        // verify the required parameter 'metafield_id' is set
        if (!isset($metafield_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling getProductMetafieldByProductId');
        }
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductMetafieldByProductId');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($metafield_id)) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }

        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getProductMetafieldsByProductId
    * 
    *
    * @param int $product_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetaFieldCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getProductMetafieldsByProductId($product_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductMetafieldsByProductId');
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }
        if (isset($params['key'])) {
            $key = $params['key'];
        }
        if (isset($params['namespace'])) {
            $namespace = $params['namespace'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params

        if (isset($key)) {
            $queryParams['key'] = $this->apiClient->getSerializer()->toQueryValue($key);
        }
        // query params

        if (isset($namespace)) {
            $queryParams['namespace'] = $this->apiClient->getSerializer()->toQueryValue($namespace);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getProductReviewById
    * 
    *
    * @param int $product_id
    * @param int $review_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductReviewResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getProductReviewById($product_id, $review_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductReviewById');
        }
        // verify the required parameter 'review_id' is set
        if (!isset($review_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $review_id when calling getProductReviewById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/reviews/{review_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($review_id)) {
            $resourcePath = str_replace(
                "{" . "review_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($review_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductReviewResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductReviewResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductReviewResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getProductReviews
    * 
    *
    * @param int $product_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductReviewCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getProductReviews($product_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductReviews');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/reviews";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductReviewCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductReviewCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductReviewCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getProductVideoById
    * 
    *
    * @param int $product_id
    * @param int $video_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductVideoResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getProductVideoById($product_id, $video_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductVideoById');
        }
        // verify the required parameter 'video_id' is set
        if (!isset($video_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $video_id when calling getProductVideoById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/videos/{video_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($video_id)) {
            $resourcePath = str_replace(
                "{" . "video_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($video_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductVideoResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductVideoResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductVideoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getProductVideos
    * 
    *
    * @param int $product_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductVideoCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getProductVideos($product_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductVideos');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/videos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductVideoCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductVideoCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductVideoCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getProducts
    * 
    *
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getProducts(array $params = [])
    {
        
        if (isset($params['id'])) {
            $id = $params['id'];
        }
        if (isset($params['name'])) {
            $name = $params['name'];
        }
        if (isset($params['sku'])) {
            $sku = $params['sku'];
        }
        if (isset($params['upc'])) {
            $upc = $params['upc'];
        }
        if (isset($params['price'])) {
            $price = $params['price'];
        }
        if (isset($params['weight'])) {
            $weight = $params['weight'];
        }
        if (isset($params['condition'])) {
            $condition = $params['condition'];
        }
        if (isset($params['brand_id'])) {
            $brand_id = $params['brand_id'];
        }
        if (isset($params['date_modified'])) {
            $date_modified = $params['date_modified'];
        }
        if (isset($params['date_last_imported'])) {
            $date_last_imported = $params['date_last_imported'];
        }
        if (isset($params['is_visible'])) {
            $is_visible = $params['is_visible'];
        }
        if (isset($params['is_featured'])) {
            $is_featured = $params['is_featured'];
        }
        if (isset($params['is_free_shipping'])) {
            $is_free_shipping = $params['is_free_shipping'];
        }
        if (isset($params['inventory_level'])) {
            $inventory_level = $params['inventory_level'];
        }
        if (isset($params['inventory_low'])) {
            $inventory_low = $params['inventory_low'];
        }
        if (isset($params['out_of_stock'])) {
            $out_of_stock = $params['out_of_stock'];
        }
        if (isset($params['total_sold'])) {
            $total_sold = $params['total_sold'];
        }
        if (isset($params['type'])) {
            $type = $params['type'];
        }
        if (isset($params['categories'])) {
            $categories = $params['categories'];
        }
        if (isset($params['keyword'])) {
            $keyword = $params['keyword'];
        }
        if (isset($params['keyword_context'])) {
            $keyword_context = $params['keyword_context'];
        }
        if (isset($params['status'])) {
            $status = $params['status'];
        }
        if (isset($params['include'])) {
            $include = $params['include'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }
        if (isset($params['availability'])) {
            $availability = $params['availability'];
        }
        if (isset($params['price_list_id'])) {
            $price_list_id = $params['price_list_id'];
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }
        if (isset($params['direction'])) {
            $direction = $params['direction'];
        }
        if (isset($params['sort'])) {
            $sort = $params['sort'];
        }

        // parse inputs
        $resourcePath = "/catalog/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($id)) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params

        if (isset($name)) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params

        if (isset($sku)) {
            $queryParams['sku'] = $this->apiClient->getSerializer()->toQueryValue($sku);
        }
        // query params

        if (isset($upc)) {
            $queryParams['upc'] = $this->apiClient->getSerializer()->toQueryValue($upc);
        }
        // query params

        if (isset($price)) {
            $queryParams['price'] = $this->apiClient->getSerializer()->toQueryValue($price);
        }
        // query params

        if (isset($weight)) {
            $queryParams['weight'] = $this->apiClient->getSerializer()->toQueryValue($weight);
        }
        // query params

        if (isset($condition)) {
            $queryParams['condition'] = $this->apiClient->getSerializer()->toQueryValue($condition);
        }
        // query params

        if (isset($brand_id)) {
            $queryParams['brand_id'] = $this->apiClient->getSerializer()->toQueryValue($brand_id);
        }
        // query params

        if (isset($date_modified)) {
            $queryParams['date_modified'] = $this->apiClient->getSerializer()->toQueryValue($date_modified);
        }
        // query params

        if (isset($date_last_imported)) {
            $queryParams['date_last_imported'] = $this->apiClient->getSerializer()->toQueryValue($date_last_imported);
        }
        // query params

        if (isset($is_visible)) {
            $queryParams['is_visible'] = $this->apiClient->getSerializer()->toQueryValue($is_visible);
        }
        // query params

        if (isset($is_featured)) {
            $queryParams['is_featured'] = $this->apiClient->getSerializer()->toQueryValue($is_featured);
        }
        // query params

        if (isset($is_free_shipping)) {
            $queryParams['is_free_shipping'] = $this->apiClient->getSerializer()->toQueryValue($is_free_shipping);
        }
        // query params

        if (isset($inventory_level)) {
            $queryParams['inventory_level'] = $this->apiClient->getSerializer()->toQueryValue($inventory_level);
        }
        // query params

        if (isset($inventory_low)) {
            $queryParams['inventory_low'] = $this->apiClient->getSerializer()->toQueryValue($inventory_low);
        }
        // query params

        if (isset($out_of_stock)) {
            $queryParams['out_of_stock'] = $this->apiClient->getSerializer()->toQueryValue($out_of_stock);
        }
        // query params

        if (isset($total_sold)) {
            $queryParams['total_sold'] = $this->apiClient->getSerializer()->toQueryValue($total_sold);
        }
        // query params

        if (isset($type)) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params

        if (isset($categories)) {
            $queryParams['categories'] = $this->apiClient->getSerializer()->toQueryValue($categories);
        }
        // query params

        if (isset($keyword)) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }
        // query params

        if (isset($keyword_context)) {
            $queryParams['keyword_context'] = $this->apiClient->getSerializer()->toQueryValue($keyword_context);
        }
        // query params

        if (isset($status)) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params

        if (isset($include)) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // query params

        if (isset($availability)) {
            $queryParams['availability'] = $this->apiClient->getSerializer()->toQueryValue($availability);
        }
        // query params

        if (isset($price_list_id)) {
            $queryParams['price_list_id'] = $this->apiClient->getSerializer()->toQueryValue($price_list_id);
        }
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params

        if (isset($direction)) {
            $queryParams['direction'] = $this->apiClient->getSerializer()->toQueryValue($direction);
        }
        // query params

        if (isset($sort)) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getVariantById
    * 
    *
    * @param int $product_id
    * @param int $variant_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\VariantResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getVariantById($product_id, $variant_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getVariantById');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling getVariantById');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\VariantResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\VariantResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\VariantResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getVariantMetafieldByProductIdAndVariantId
    * 
    *
    * @param int $metafield_id
    * @param int $product_id
    * @param int $variant_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetafieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getVariantMetafieldByProductIdAndVariantId($metafield_id, $product_id, $variant_id, array $params = [])
    {
        
        // verify the required parameter 'metafield_id' is set
        if (!isset($metafield_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling getVariantMetafieldByProductIdAndVariantId');
        }
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getVariantMetafieldByProductIdAndVariantId');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling getVariantMetafieldByProductIdAndVariantId');
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($metafield_id)) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }

        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getVariantMetafieldsByProductIdAndVariantId
    * 
    *
    * @param int $product_id
    * @param int $variant_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetaFieldCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getVariantMetafieldsByProductIdAndVariantId($product_id, $variant_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getVariantMetafieldsByProductIdAndVariantId');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling getVariantMetafieldsByProductIdAndVariantId');
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }
        if (isset($params['key'])) {
            $key = $params['key'];
        }
        if (isset($params['namespace'])) {
            $namespace = $params['namespace'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params

        if (isset($key)) {
            $queryParams['key'] = $this->apiClient->getSerializer()->toQueryValue($key);
        }
        // query params

        if (isset($namespace)) {
            $queryParams['namespace'] = $this->apiClient->getSerializer()->toQueryValue($namespace);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getVariants
    * 
    *
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\VariantCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getVariants(array $params = [])
    {
        
        if (isset($params['id'])) {
            $id = $params['id'];
        }
        if (isset($params['sku'])) {
            $sku = $params['sku'];
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/variants";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($id)) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params

        if (isset($sku)) {
            $queryParams['sku'] = $this->apiClient->getSerializer()->toQueryValue($sku);
        }
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\VariantCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\VariantCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\VariantCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getVariantsByProductId
    * 
    *
    * @param int $product_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\VariantCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getVariantsByProductId($product_id, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getVariantsByProductId');
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }
        if (isset($params['include_fields'])) {
            $include_fields = $params['include_fields'];
        }
        if (isset($params['exclude_fields'])) {
            $exclude_fields = $params['exclude_fields'];
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params

        if (isset($include_fields)) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params

        if (isset($exclude_fields)) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\VariantCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\VariantCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\VariantCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateBrand
    * 
    *
    * @param int $brand_id
    * @param \BigCommerce\Api\v3\Model\BrandPut $brand
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\BrandResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateBrand($brand_id, \BigCommerce\Api\v3\Model\BrandPut $brand, array $params = [])
    {
        
        // verify the required parameter 'brand_id' is set
        if (!isset($brand_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling updateBrand');
        }
        // verify the required parameter 'brand' is set
        if (!isset($brand)) {
            throw new \InvalidArgumentException('Missing the required parameter $brand when calling updateBrand');
        }

        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($brand_id)) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($brand)) {
        $_tempBody = $brand;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BrandResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BrandResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BrandResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateBrandMetafield
    * 
    *
    * @param int $metafield_id
    * @param int $brand_id
    * @param \BigCommerce\Api\v3\Model\MetafieldPut $metafield
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetafieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateBrandMetafield($metafield_id, $brand_id, \BigCommerce\Api\v3\Model\MetafieldPut $metafield, array $params = [])
    {
        
        // verify the required parameter 'metafield_id' is set
        if (!isset($metafield_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling updateBrandMetafield');
        }
        // verify the required parameter 'brand_id' is set
        if (!isset($brand_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling updateBrandMetafield');
        }
        // verify the required parameter 'metafield' is set
        if (!isset($metafield)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling updateBrandMetafield');
        }

        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($metafield_id)) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }

        // path params


        if (isset($brand_id)) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
        $_tempBody = $metafield;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateBulkPricingRule
    * 
    *
    * @param int $product_id
    * @param int $bulk_pricing_rule_id
    * @param \BigCommerce\Api\v3\Model\BulkPricingRulePut $bulk_pricing_rule
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\BulkPricingRuleResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateBulkPricingRule($product_id, $bulk_pricing_rule_id, \BigCommerce\Api\v3\Model\BulkPricingRulePut $bulk_pricing_rule, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateBulkPricingRule');
        }
        // verify the required parameter 'bulk_pricing_rule_id' is set
        if (!isset($bulk_pricing_rule_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $bulk_pricing_rule_id when calling updateBulkPricingRule');
        }
        // verify the required parameter 'bulk_pricing_rule' is set
        if (!isset($bulk_pricing_rule)) {
            throw new \InvalidArgumentException('Missing the required parameter $bulk_pricing_rule when calling updateBulkPricingRule');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($bulk_pricing_rule_id)) {
            $resourcePath = str_replace(
                "{" . "bulk_pricing_rule_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bulk_pricing_rule_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($bulk_pricing_rule)) {
        $_tempBody = $bulk_pricing_rule;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateCategory
    * 
    *
    * @param int $category_id
    * @param \BigCommerce\Api\v3\Model\CategoryPut $category
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\CategoryResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateCategory($category_id, \BigCommerce\Api\v3\Model\CategoryPut $category, array $params = [])
    {
        
        // verify the required parameter 'category_id' is set
        if (!isset($category_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling updateCategory');
        }
        // verify the required parameter 'category' is set
        if (!isset($category)) {
            throw new \InvalidArgumentException('Missing the required parameter $category when calling updateCategory');
        }

        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($category_id)) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($category)) {
        $_tempBody = $category;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CategoryResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CategoryResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CategoryResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateCategoryMetafield
    * 
    *
    * @param int $metafield_id
    * @param int $category_id
    * @param \BigCommerce\Api\v3\Model\MetafieldPut $metafield
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetafieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateCategoryMetafield($metafield_id, $category_id, \BigCommerce\Api\v3\Model\MetafieldPut $metafield, array $params = [])
    {
        
        // verify the required parameter 'metafield_id' is set
        if (!isset($metafield_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling updateCategoryMetafield');
        }
        // verify the required parameter 'category_id' is set
        if (!isset($category_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling updateCategoryMetafield');
        }
        // verify the required parameter 'metafield' is set
        if (!isset($metafield)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling updateCategoryMetafield');
        }

        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($metafield_id)) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }

        // path params


        if (isset($category_id)) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
        $_tempBody = $metafield;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateComplexRule
    * 
    *
    * @param int $product_id
    * @param int $complex_rule_id
    * @param \BigCommerce\Api\v3\Model\ComplexRulePut $complex_rule
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ComplexRuleResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateComplexRule($product_id, $complex_rule_id, \BigCommerce\Api\v3\Model\ComplexRulePut $complex_rule, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateComplexRule');
        }
        // verify the required parameter 'complex_rule_id' is set
        if (!isset($complex_rule_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $complex_rule_id when calling updateComplexRule');
        }
        // verify the required parameter 'complex_rule' is set
        if (!isset($complex_rule)) {
            throw new \InvalidArgumentException('Missing the required parameter $complex_rule when calling updateComplexRule');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/complex-rules/{complex_rule_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($complex_rule_id)) {
            $resourcePath = str_replace(
                "{" . "complex_rule_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($complex_rule_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($complex_rule)) {
        $_tempBody = $complex_rule;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ComplexRuleResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ComplexRuleResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ComplexRuleResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateConfigurableField
    * 
    *
    * @param int $product_id
    * @param int $configurable_field_id
    * @param \BigCommerce\Api\v3\Model\ConfigurableFieldPut $configurable_field
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ConfigurableFieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateConfigurableField($product_id, $configurable_field_id, \BigCommerce\Api\v3\Model\ConfigurableFieldPut $configurable_field, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateConfigurableField');
        }
        // verify the required parameter 'configurable_field_id' is set
        if (!isset($configurable_field_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $configurable_field_id when calling updateConfigurableField');
        }
        // verify the required parameter 'configurable_field' is set
        if (!isset($configurable_field)) {
            throw new \InvalidArgumentException('Missing the required parameter $configurable_field when calling updateConfigurableField');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/configurable-fields/{configurable_field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($configurable_field_id)) {
            $resourcePath = str_replace(
                "{" . "configurable_field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($configurable_field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($configurable_field)) {
        $_tempBody = $configurable_field;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateCustomField
    * 
    *
    * @param int $product_id
    * @param int $custom_field_id
    * @param \BigCommerce\Api\v3\Model\CustomFieldPut $custom_field
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\CustomFieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateCustomField($product_id, $custom_field_id, \BigCommerce\Api\v3\Model\CustomFieldPut $custom_field, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateCustomField');
        }
        // verify the required parameter 'custom_field_id' is set
        if (!isset($custom_field_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_field_id when calling updateCustomField');
        }
        // verify the required parameter 'custom_field' is set
        if (!isset($custom_field)) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_field when calling updateCustomField');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/custom-fields/{custom_field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($custom_field_id)) {
            $resourcePath = str_replace(
                "{" . "custom_field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($custom_field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($custom_field)) {
        $_tempBody = $custom_field;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CustomFieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CustomFieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CustomFieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateModifier
    * 
    *
    * @param int $product_id
    * @param int $modifier_id
    * @param \BigCommerce\Api\v3\Model\ModifierPut $modifier
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ModifierResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateModifier($product_id, $modifier_id, \BigCommerce\Api\v3\Model\ModifierPut $modifier, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateModifier');
        }
        // verify the required parameter 'modifier_id' is set
        if (!isset($modifier_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling updateModifier');
        }
        // verify the required parameter 'modifier' is set
        if (!isset($modifier)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier when calling updateModifier');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($modifier_id)) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($modifier)) {
        $_tempBody = $modifier;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateModifierValue
    * 
    *
    * @param int $product_id
    * @param int $modifier_id
    * @param int $value_id
    * @param \BigCommerce\Api\v3\Model\ModifierValuePut $modifier_value
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ModifierValueResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateModifierValue($product_id, $modifier_id, $value_id, \BigCommerce\Api\v3\Model\ModifierValuePut $modifier_value, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateModifierValue');
        }
        // verify the required parameter 'modifier_id' is set
        if (!isset($modifier_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling updateModifierValue');
        }
        // verify the required parameter 'value_id' is set
        if (!isset($value_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling updateModifierValue');
        }
        // verify the required parameter 'modifier_value' is set
        if (!isset($modifier_value)) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_value when calling updateModifierValue');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($modifier_id)) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }

        // path params


        if (isset($value_id)) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($modifier_value)) {
        $_tempBody = $modifier_value;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierValueResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierValueResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierValueResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateOption
    * 
    *
    * @param int $product_id
    * @param int $option_id
    * @param \BigCommerce\Api\v3\Model\OptionPut $option
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\OptionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateOption($product_id, $option_id, \BigCommerce\Api\v3\Model\OptionPut $option, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateOption');
        }
        // verify the required parameter 'option_id' is set
        if (!isset($option_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling updateOption');
        }
        // verify the required parameter 'option' is set
        if (!isset($option)) {
            throw new \InvalidArgumentException('Missing the required parameter $option when calling updateOption');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($option_id)) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($option)) {
        $_tempBody = $option;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateOptionValue
    * 
    *
    * @param int $product_id
    * @param int $option_id
    * @param int $value_id
    * @param \BigCommerce\Api\v3\Model\OptionValuePut $option_value
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\OptionValueResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateOptionValue($product_id, $option_id, $value_id, \BigCommerce\Api\v3\Model\OptionValuePut $option_value, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateOptionValue');
        }
        // verify the required parameter 'option_id' is set
        if (!isset($option_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling updateOptionValue');
        }
        // verify the required parameter 'value_id' is set
        if (!isset($value_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling updateOptionValue');
        }
        // verify the required parameter 'option_value' is set
        if (!isset($option_value)) {
            throw new \InvalidArgumentException('Missing the required parameter $option_value when calling updateOptionValue');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}/values/{value_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($option_id)) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }

        // path params


        if (isset($value_id)) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($option_value)) {
        $_tempBody = $option_value;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionValueResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionValueResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionValueResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateProduct
    * 
    *
    * @param int $product_id
    * @param \BigCommerce\Api\v3\Model\ProductPut $product
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateProduct($product_id, \BigCommerce\Api\v3\Model\ProductPut $product, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateProduct');
        }
        // verify the required parameter 'product' is set
        if (!isset($product)) {
            throw new \InvalidArgumentException('Missing the required parameter $product when calling updateProduct');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product)) {
        $_tempBody = $product;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateProductImage
    * 
    *
    * @param int $product_id
    * @param int $image_id
    * @param \BigCommerce\Api\v3\Model\ProductImagePut $product_image
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductImageResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateProductImage($product_id, $image_id, \BigCommerce\Api\v3\Model\ProductImagePut $product_image, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateProductImage');
        }
        // verify the required parameter 'image_id' is set
        if (!isset($image_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $image_id when calling updateProductImage');
        }
        // verify the required parameter 'product_image' is set
        if (!isset($product_image)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_image when calling updateProductImage');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/images/{image_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($image_id)) {
            $resourcePath = str_replace(
                "{" . "image_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($image_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product_image)) {
        $_tempBody = $product_image;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductImageResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductImageResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductImageResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateProductMetafield
    * 
    *
    * @param int $metafield_id
    * @param int $product_id
    * @param \BigCommerce\Api\v3\Model\MetafieldPut $metafield
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetafieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateProductMetafield($metafield_id, $product_id, \BigCommerce\Api\v3\Model\MetafieldPut $metafield, array $params = [])
    {
        
        // verify the required parameter 'metafield_id' is set
        if (!isset($metafield_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling updateProductMetafield');
        }
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateProductMetafield');
        }
        // verify the required parameter 'metafield' is set
        if (!isset($metafield)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling updateProductMetafield');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($metafield_id)) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }

        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
        $_tempBody = $metafield;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateProductReview
    * 
    *
    * @param int $product_id
    * @param int $review_id
    * @param \BigCommerce\Api\v3\Model\ProductReviewPut $product_review
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductReviewResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateProductReview($product_id, $review_id, \BigCommerce\Api\v3\Model\ProductReviewPut $product_review, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateProductReview');
        }
        // verify the required parameter 'review_id' is set
        if (!isset($review_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $review_id when calling updateProductReview');
        }
        // verify the required parameter 'product_review' is set
        if (!isset($product_review)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_review when calling updateProductReview');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/reviews/{review_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($review_id)) {
            $resourcePath = str_replace(
                "{" . "review_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($review_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product_review)) {
        $_tempBody = $product_review;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductReviewResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductReviewResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductReviewResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateProductVideo
    * 
    *
    * @param int $product_id
    * @param int $video_id
    * @param \BigCommerce\Api\v3\Model\ProductVideoPut $product_video
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ProductVideoResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateProductVideo($product_id, $video_id, \BigCommerce\Api\v3\Model\ProductVideoPut $product_video, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateProductVideo');
        }
        // verify the required parameter 'video_id' is set
        if (!isset($video_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $video_id when calling updateProductVideo');
        }
        // verify the required parameter 'product_video' is set
        if (!isset($product_video)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_video when calling updateProductVideo');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/videos/{video_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($video_id)) {
            $resourcePath = str_replace(
                "{" . "video_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($video_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product_video)) {
        $_tempBody = $product_video;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductVideoResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductVideoResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductVideoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateVariant
    * 
    *
    * @param int $product_id
    * @param int $variant_id
    * @param \BigCommerce\Api\v3\Model\VariantPut $variant
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\VariantResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateVariant($product_id, $variant_id, \BigCommerce\Api\v3\Model\VariantPut $variant, array $params = [])
    {
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateVariant');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling updateVariant');
        }
        // verify the required parameter 'variant' is set
        if (!isset($variant)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant when calling updateVariant');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($variant)) {
        $_tempBody = $variant;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\VariantResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\VariantResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\VariantResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateVariantMetafield
    * 
    *
    * @param int $metafield_id
    * @param int $product_id
    * @param int $variant_id
    * @param \BigCommerce\Api\v3\Model\MetafieldPut $metafield
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\MetafieldResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateVariantMetafield($metafield_id, $product_id, $variant_id, \BigCommerce\Api\v3\Model\MetafieldPut $metafield, array $params = [])
    {
        
        // verify the required parameter 'metafield_id' is set
        if (!isset($metafield_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling updateVariantMetafield');
        }
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateVariantMetafield');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling updateVariantMetafield');
        }
        // verify the required parameter 'metafield' is set
        if (!isset($metafield)) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling updateVariantMetafield');
        }

        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($metafield_id)) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }

        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
        $_tempBody = $metafield;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
}
