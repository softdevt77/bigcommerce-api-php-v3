<?php
/**
 * CustomersApi
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BigCommerce API
 *
 * A Swagger Document for the BigCommmerce v3 API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\v3;

use \BigCommerce\Api\v3\Configuration;
use \BigCommerce\Api\v3\ApiClient;
use \BigCommerce\Api\v3\ApiException;
use \BigCommerce\Api\v3\ObjectSerializer;

/**
 * CustomersApi Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomersApi
{

    /**
     * API Client
     *
     * @var \BigCommerce\Api\v3\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BigCommerce\Api\v3\ApiClient $apiClient The api client to use
     */
    public function __construct(\BigCommerce\Api\v3\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
    }

    /**
    * Get API client
    *
    * @return \BigCommerce\Api\v3\ApiClient get the API client
    */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
    * Set the API client
    *
    * @param \BigCommerce\Api\v3\ApiClient $apiClient set the API client
    *
    * @return CustomersApi
    */
    public function setApiClient(\BigCommerce\Api\v3\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Operation createSubscriber
    * 
    *
    * @param \BigCommerce\Api\v3\Model\SubscriberPost $subscriber
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\SubscriberResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createSubscriber(\BigCommerce\Api\v3\Model\SubscriberPost $subscriber, array $params = [])
    {
        
        // verify the required parameter 'subscriber' is set
        if (!isset($subscriber)) {
            throw new \InvalidArgumentException('Missing the required parameter $subscriber when calling createSubscriber');
        }

        // parse inputs
        $resourcePath = "/customers/subscribers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($subscriber)) {
        $_tempBody = $subscriber;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\SubscriberResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\SubscriberResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\SubscriberResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteSubscriberById
    * 
    *
    * @param int $subscriber_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteSubscriberById($subscriber_id, array $params = [])
    {
        
        // verify the required parameter 'subscriber_id' is set
        if (!isset($subscriber_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $subscriber_id when calling deleteSubscriberById');
        }

        // parse inputs
        $resourcePath = "/customers/subscribers/{subscriber_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($subscriber_id)) {
            $resourcePath = str_replace(
                "{" . "subscriber_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscriber_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteSubscribers
    * 
    *
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteSubscribers(array $params = [])
    {
        
        if (isset($params['email'])) {
            $email = $params['email'];
        }
        if (isset($params['first_name'])) {
            $first_name = $params['first_name'];
        }
        if (isset($params['last_name'])) {
            $last_name = $params['last_name'];
        }
        if (isset($params['source'])) {
            $source = $params['source'];
        }
        if (isset($params['order_id'])) {
            $order_id = $params['order_id'];
        }
        if (isset($params['date_created'])) {
            $date_created = $params['date_created'];
        }
        if (isset($params['date_modified'])) {
            $date_modified = $params['date_modified'];
        }

        // parse inputs
        $resourcePath = "/customers/subscribers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($email)) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params

        if (isset($first_name)) {
            $queryParams['first_name'] = $this->apiClient->getSerializer()->toQueryValue($first_name);
        }
        // query params

        if (isset($last_name)) {
            $queryParams['last_name'] = $this->apiClient->getSerializer()->toQueryValue($last_name);
        }
        // query params

        if (isset($source)) {
            $queryParams['source'] = $this->apiClient->getSerializer()->toQueryValue($source);
        }
        // query params

        if (isset($order_id)) {
            $queryParams['order_id'] = $this->apiClient->getSerializer()->toQueryValue($order_id);
        }
        // query params

        if (isset($date_created)) {
            $queryParams['date_created'] = $this->apiClient->getSerializer()->toQueryValue($date_created);
        }
        // query params

        if (isset($date_modified)) {
            $queryParams['date_modified'] = $this->apiClient->getSerializer()->toQueryValue($date_modified);
        }        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation getSubscriberById
    * 
    *
    * @param int $subscriber_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\SubscriberResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getSubscriberById($subscriber_id, array $params = [])
    {
        
        // verify the required parameter 'subscriber_id' is set
        if (!isset($subscriber_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $subscriber_id when calling getSubscriberById');
        }

        // parse inputs
        $resourcePath = "/customers/subscribers/{subscriber_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($subscriber_id)) {
            $resourcePath = str_replace(
                "{" . "subscriber_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscriber_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\SubscriberResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\SubscriberResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\SubscriberResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getSubscribers
    * 
    *
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\SubscriberCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getSubscribers(array $params = [])
    {
        
        if (isset($params['email'])) {
            $email = $params['email'];
        }
        if (isset($params['first_name'])) {
            $first_name = $params['first_name'];
        }
        if (isset($params['last_name'])) {
            $last_name = $params['last_name'];
        }
        if (isset($params['source'])) {
            $source = $params['source'];
        }
        if (isset($params['order_id'])) {
            $order_id = $params['order_id'];
        }
        if (isset($params['date_created'])) {
            $date_created = $params['date_created'];
        }
        if (isset($params['date_modified'])) {
            $date_modified = $params['date_modified'];
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }

        // parse inputs
        $resourcePath = "/customers/subscribers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($email)) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params

        if (isset($first_name)) {
            $queryParams['first_name'] = $this->apiClient->getSerializer()->toQueryValue($first_name);
        }
        // query params

        if (isset($last_name)) {
            $queryParams['last_name'] = $this->apiClient->getSerializer()->toQueryValue($last_name);
        }
        // query params

        if (isset($source)) {
            $queryParams['source'] = $this->apiClient->getSerializer()->toQueryValue($source);
        }
        // query params

        if (isset($order_id)) {
            $queryParams['order_id'] = $this->apiClient->getSerializer()->toQueryValue($order_id);
        }
        // query params

        if (isset($date_created)) {
            $queryParams['date_created'] = $this->apiClient->getSerializer()->toQueryValue($date_created);
        }
        // query params

        if (isset($date_modified)) {
            $queryParams['date_modified'] = $this->apiClient->getSerializer()->toQueryValue($date_modified);
        }
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\SubscriberCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\SubscriberCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\SubscriberCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updateSubscriber
    * 
    *
    * @param int $subscriber_id
    * @param \BigCommerce\Api\v3\Model\SubscriberPut $subscriber
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\SubscriberResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updateSubscriber($subscriber_id, \BigCommerce\Api\v3\Model\SubscriberPut $subscriber, array $params = [])
    {
        
        // verify the required parameter 'subscriber_id' is set
        if (!isset($subscriber_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $subscriber_id when calling updateSubscriber');
        }
        // verify the required parameter 'subscriber' is set
        if (!isset($subscriber)) {
            throw new \InvalidArgumentException('Missing the required parameter $subscriber when calling updateSubscriber');
        }

        // parse inputs
        $resourcePath = "/customers/subscribers/{subscriber_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($subscriber_id)) {
            $resourcePath = str_replace(
                "{" . "subscriber_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscriber_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($subscriber)) {
        $_tempBody = $subscriber;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\SubscriberResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\SubscriberResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\SubscriberResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
}
