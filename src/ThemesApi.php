<?php
/**
 * ThemesApi
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BigCommerce API
 *
 * A Swagger Document for the BigCommmerce v3 API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\v3;

use \BigCommerce\Api\v3\Configuration;
use \BigCommerce\Api\v3\ApiClient;
use \BigCommerce\Api\v3\ApiException;
use \BigCommerce\Api\v3\ObjectSerializer;

/**
 * ThemesApi Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ThemesApi
{

    /**
     * API Client
     *
     * @var \BigCommerce\Api\v3\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BigCommerce\Api\v3\ApiClient $apiClient The api client to use
     */
    public function __construct(\BigCommerce\Api\v3\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
    }

    /**
    * Get API client
    *
    * @return \BigCommerce\Api\v3\ApiClient get the API client
    */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
    * Set the API client
    *
    * @param \BigCommerce\Api\v3\ApiClient $apiClient set the API client
    *
    * @return ThemesApi
    */
    public function setApiClient(\BigCommerce\Api\v3\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Operation activateStoreTheme
    * Activates a store theme.
    *
    * @param \BigCommerce\Api\v3\Model\Activate $body
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\NoContent
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function activateStoreTheme(\BigCommerce\Api\v3\Model\Activate $body, array $params = [])
    {
        
        // verify the required parameter 'body' is set
        if (!isset($body)) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling activateStoreTheme');
        }

        // parse inputs
        $resourcePath = "/themes/actions/activate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
        $_tempBody = $body;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\NoContent'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\NoContent', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 204:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NoContent', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation deleteStoreTheme
    * Deletes a specified store theme.
    *
    * @param int $theme_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\NoContent
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deleteStoreTheme($theme_id, array $params = [])
    {
        
        // verify the required parameter 'theme_id' is set
        if (!isset($theme_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $theme_id when calling deleteStoreTheme');
        }

        // parse inputs
        $resourcePath = "/themes/{theme_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($theme_id)) {
            $resourcePath = str_replace(
                "{" . "theme_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($theme_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\NoContent'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\NoContent', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 204:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NoContent', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation downloadTheme
    * Downloads a specified store theme.
    *
    * @param int $theme_id
    * @param \BigCommerce\Api\v3\Model\WhichThemeToDownload $which
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\JobId
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function downloadTheme($theme_id, \BigCommerce\Api\v3\Model\WhichThemeToDownload $which, array $params = [])
    {
        
        // verify the required parameter 'theme_id' is set
        if (!isset($theme_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $theme_id when calling downloadTheme');
        }
        // verify the required parameter 'which' is set
        if (!isset($which)) {
            throw new \InvalidArgumentException('Missing the required parameter $which when calling downloadTheme');
        }

        // parse inputs
        $resourcePath = "/themes/{theme_id}/actions/download";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($theme_id)) {
            $resourcePath = str_replace(
                "{" . "theme_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($theme_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($which)) {
        $_tempBody = $which;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\JobId'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\JobId', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\JobId', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getJob
    * Gets a specified job.
    *
    * @param int $job_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\JobResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getJob($job_id, array $params = [])
    {
        
        // verify the required parameter 'job_id' is set
        if (!isset($job_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling getJob');
        }

        // parse inputs
        $resourcePath = "/themes/jobs/{job_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($job_id)) {
            $resourcePath = str_replace(
                "{" . "job_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\JobResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\JobResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\JobResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getStoreTheme
    * Gets a specified store theme.
    *
    * @param int $theme_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ThemeResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getStoreTheme($theme_id, array $params = [])
    {
        
        // verify the required parameter 'theme_id' is set
        if (!isset($theme_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $theme_id when calling getStoreTheme');
        }

        // parse inputs
        $resourcePath = "/themes/{theme_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($theme_id)) {
            $resourcePath = str_replace(
                "{" . "theme_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($theme_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ThemeResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ThemeResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ThemeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getStoreThemes
    * Gets all store themes.
    *
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\ThemesCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getStoreThemes(array $params = [])
    {
        

        // parse inputs
        $resourcePath = "/themes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ThemesCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ThemesCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ThemesCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation uploadTheme
    * Uploads a new theme to a BigCommerce store.
    *
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\JobId
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function uploadTheme(array $params = [])
    {
        
        // verify the required parameter 'file' is set

        // parse inputs
        $resourcePath = "/themes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // form params
        if ($file !== null) {
        // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
        // See: https://wiki.php.net/rfc/curl-file-upload
        if (function_exists('curl_file_create')) {
            $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
        } else {
            $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
        }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\JobId'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\JobId', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\JobId', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
}
