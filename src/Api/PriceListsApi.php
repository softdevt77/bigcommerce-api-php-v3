<?php
/**
 * PriceListsApi
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BigCommerce API
 *
 * A Swagger Document for the BigCommmerce v3 API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\v3\Api;

use \BigCommerce\Api\v3\ApiClient;
use \BigCommerce\Api\v3\ApiException;
use \BigCommerce\Api\v3\Configuration;
use \BigCommerce\Api\v3\ObjectSerializer;

/**
 * PriceListsApi Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PriceListsApi
{
    /**
     * API Client
     *
     * @var \BigCommerce\Api\v3\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BigCommerce\Api\v3\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\BigCommerce\Api\v3\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.bigcommerce.com/stores/{{store_id}}/v3');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \BigCommerce\Api\v3\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \BigCommerce\Api\v3\ApiClient $apiClient set the API client
     *
     * @return PriceListsApi
     */
    public function setApiClient(\BigCommerce\Api\v3\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createPriceList
     *
     * 
     *
     * @param \BigCommerce\Api\v3\Model\PriceListPost $price_list A BigCommerce &#x60;PriceList&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\PriceListResponse
     */
    public function createPriceList($price_list)
    {
        list($response) = $this->createPriceListWithHttpInfo($price_list);
        return $response;
    }

    /**
     * Operation createPriceListWithHttpInfo
     *
     * 
     *
     * @param \BigCommerce\Api\v3\Model\PriceListPost $price_list A BigCommerce &#x60;PriceList&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\PriceListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPriceListWithHttpInfo($price_list)
    {
        // verify the required parameter 'price_list' is set
        if ($price_list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list when calling createPriceList');
        }
        // parse inputs
        $resourcePath = "/pricelists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($price_list)) {
            $_tempBody = $price_list;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceListResponse',
                '/pricelists'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePriceList
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deletePriceList($price_list_id)
    {
        list($response) = $this->deletePriceListWithHttpInfo($price_list_id);
        return $response;
    }

    /**
     * Operation deletePriceListWithHttpInfo
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePriceListWithHttpInfo($price_list_id)
    {
        // verify the required parameter 'price_list_id' is set
        if ($price_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling deletePriceList');
        }
        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($price_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pricelists/{price_list_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deletePriceListRecord
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param string $currency_code The currency code associated with the price record being acted upon. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deletePriceListRecord($price_list_id, $variant_id, $currency_code)
    {
        list($response) = $this->deletePriceListRecordWithHttpInfo($price_list_id, $variant_id, $currency_code);
        return $response;
    }

    /**
     * Operation deletePriceListRecordWithHttpInfo
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param string $currency_code The currency code associated with the price record being acted upon. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePriceListRecordWithHttpInfo($price_list_id, $variant_id, $currency_code)
    {
        // verify the required parameter 'price_list_id' is set
        if ($price_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling deletePriceListRecord');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling deletePriceListRecord');
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling deletePriceListRecord');
        }
        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records/{variant_id}/{currency_code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($price_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                "{" . "currency_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($currency_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pricelists/{price_list_id}/records/{variant_id}/{currency_code}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deletePriceListRecordsByFilter
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id The ID of the &#x60;Variant&#x60; whose prices were requested. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\NoContent
     */
    public function deletePriceListRecordsByFilter($price_list_id, $variant_id = null)
    {
        list($response) = $this->deletePriceListRecordsByFilterWithHttpInfo($price_list_id, $variant_id);
        return $response;
    }

    /**
     * Operation deletePriceListRecordsByFilterWithHttpInfo
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id The ID of the &#x60;Variant&#x60; whose prices were requested. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\NoContent, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePriceListRecordsByFilterWithHttpInfo($price_list_id, $variant_id = null)
    {
        // verify the required parameter 'price_list_id' is set
        if ($price_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling deletePriceListRecordsByFilter');
        }
        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($variant_id !== null) {
            $queryParams['variant_id'] = $this->apiClient->getSerializer()->toQueryValue($variant_id);
        }
        // path params
        if ($price_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\NoContent',
                '/pricelists/{price_list_id}/records'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\NoContent', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NoContent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePriceListRecordsByVariantId
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deletePriceListRecordsByVariantId($price_list_id, $variant_id)
    {
        list($response) = $this->deletePriceListRecordsByVariantIdWithHttpInfo($price_list_id, $variant_id);
        return $response;
    }

    /**
     * Operation deletePriceListRecordsByVariantIdWithHttpInfo
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePriceListRecordsByVariantIdWithHttpInfo($price_list_id, $variant_id)
    {
        // verify the required parameter 'price_list_id' is set
        if ($price_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling deletePriceListRecordsByVariantId');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling deletePriceListRecordsByVariantId');
        }
        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records/{variant_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($price_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pricelists/{price_list_id}/records/{variant_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deletePriceListsByFilter
     *
     * 
     *
     * @param int $id Filter items by id. (optional)
     * @param string $name Filter items by name. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deletePriceListsByFilter($id = null, $name = null)
    {
        list($response) = $this->deletePriceListsByFilterWithHttpInfo($id, $name);
        return $response;
    }

    /**
     * Operation deletePriceListsByFilterWithHttpInfo
     *
     * 
     *
     * @param int $id Filter items by id. (optional)
     * @param string $name Filter items by name. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePriceListsByFilterWithHttpInfo($id = null, $name = null)
    {
        // parse inputs
        $resourcePath = "/pricelists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/pricelists'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getPriceList
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\PriceListResponse
     */
    public function getPriceList($price_list_id)
    {
        list($response) = $this->getPriceListWithHttpInfo($price_list_id);
        return $response;
    }

    /**
     * Operation getPriceListWithHttpInfo
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\PriceListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPriceListWithHttpInfo($price_list_id)
    {
        // verify the required parameter 'price_list_id' is set
        if ($price_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling getPriceList');
        }
        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($price_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceListResponse',
                '/pricelists/{price_list_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPriceListCollection
     *
     * 
     *
     * @param int $id Filter items by id. (optional)
     * @param string $name Filter items by name. (optional)
     * @param \DateTime $date_created Filter items by date_created. (optional)
     * @param \DateTime $date_modified Filter items by date_modified. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\PriceListCollectionResponse
     */
    public function getPriceListCollection($id = null, $name = null, $date_created = null, $date_modified = null, $page = null, $limit = null)
    {
        list($response) = $this->getPriceListCollectionWithHttpInfo($id, $name, $date_created, $date_modified, $page, $limit);
        return $response;
    }

    /**
     * Operation getPriceListCollectionWithHttpInfo
     *
     * 
     *
     * @param int $id Filter items by id. (optional)
     * @param string $name Filter items by name. (optional)
     * @param \DateTime $date_created Filter items by date_created. (optional)
     * @param \DateTime $date_modified Filter items by date_modified. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\PriceListCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPriceListCollectionWithHttpInfo($id = null, $name = null, $date_created = null, $date_modified = null, $page = null, $limit = null)
    {
        // parse inputs
        $resourcePath = "/pricelists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($date_created !== null) {
            $queryParams['date_created'] = $this->apiClient->getSerializer()->toQueryValue($date_created);
        }
        // query params
        if ($date_modified !== null) {
            $queryParams['date_modified'] = $this->apiClient->getSerializer()->toQueryValue($date_modified);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceListCollectionResponse',
                '/pricelists'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceListCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceListCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPriceListRecord
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param string $currency_code The currency code associated with the price record being acted upon. (required)
     * @param string $include Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include &#x60;bulk_pricing_tiers&#x60; and &#x60;sku&#x60;.  Other valies will be ignored. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\PriceRecordResponse
     */
    public function getPriceListRecord($price_list_id, $variant_id, $currency_code, $include = null)
    {
        list($response) = $this->getPriceListRecordWithHttpInfo($price_list_id, $variant_id, $currency_code, $include);
        return $response;
    }

    /**
     * Operation getPriceListRecordWithHttpInfo
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param string $currency_code The currency code associated with the price record being acted upon. (required)
     * @param string $include Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include &#x60;bulk_pricing_tiers&#x60; and &#x60;sku&#x60;.  Other valies will be ignored. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\PriceRecordResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPriceListRecordWithHttpInfo($price_list_id, $variant_id, $currency_code, $include = null)
    {
        // verify the required parameter 'price_list_id' is set
        if ($price_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling getPriceListRecord');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling getPriceListRecord');
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling getPriceListRecord');
        }
        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records/{variant_id}/{currency_code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // path params
        if ($price_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                "{" . "currency_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($currency_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceRecordResponse',
                '/pricelists/{price_list_id}/records/{variant_id}/{currency_code}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceRecordResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceRecordResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPriceListRecordCollection
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id The ID of the &#x60;Variant&#x60; whose prices were requested. (optional)
     * @param string $product_id A comma-separated list of ids of &#x60;Product&#x60;s whose prices were requested. (optional)
     * @param string $currency Filter items by currency. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include &#x60;bulk_pricing_tiers&#x60; and &#x60;sku&#x60;.  Other valies will be ignored. (optional)
     * @param float $price Filter items by price. (optional)
     * @param float $sale_price Filter items by sale_price. (optional)
     * @param float $retail_price Filter items by retail_price. (optional)
     * @param float $map_price Filter items by map_price. (optional)
     * @param float $calculated_price Filter items by calculated_price. (optional)
     * @param \DateTime $date_created Filter items by date_created. (optional)
     * @param \DateTime $date_modified Filter items by date_modified. (optional)
     * @param string $sku Filter items by sku. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\PriceRecordCollectionResponse
     */
    public function getPriceListRecordCollection($price_list_id, $variant_id = null, $product_id = null, $currency = null, $page = null, $limit = null, $include = null, $price = null, $sale_price = null, $retail_price = null, $map_price = null, $calculated_price = null, $date_created = null, $date_modified = null, $sku = null)
    {
        list($response) = $this->getPriceListRecordCollectionWithHttpInfo($price_list_id, $variant_id, $product_id, $currency, $page, $limit, $include, $price, $sale_price, $retail_price, $map_price, $calculated_price, $date_created, $date_modified, $sku);
        return $response;
    }

    /**
     * Operation getPriceListRecordCollectionWithHttpInfo
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id The ID of the &#x60;Variant&#x60; whose prices were requested. (optional)
     * @param string $product_id A comma-separated list of ids of &#x60;Product&#x60;s whose prices were requested. (optional)
     * @param string $currency Filter items by currency. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include &#x60;bulk_pricing_tiers&#x60; and &#x60;sku&#x60;.  Other valies will be ignored. (optional)
     * @param float $price Filter items by price. (optional)
     * @param float $sale_price Filter items by sale_price. (optional)
     * @param float $retail_price Filter items by retail_price. (optional)
     * @param float $map_price Filter items by map_price. (optional)
     * @param float $calculated_price Filter items by calculated_price. (optional)
     * @param \DateTime $date_created Filter items by date_created. (optional)
     * @param \DateTime $date_modified Filter items by date_modified. (optional)
     * @param string $sku Filter items by sku. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\PriceRecordCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPriceListRecordCollectionWithHttpInfo($price_list_id, $variant_id = null, $product_id = null, $currency = null, $page = null, $limit = null, $include = null, $price = null, $sale_price = null, $retail_price = null, $map_price = null, $calculated_price = null, $date_created = null, $date_modified = null, $sku = null)
    {
        // verify the required parameter 'price_list_id' is set
        if ($price_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling getPriceListRecordCollection');
        }
        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($variant_id !== null) {
            $queryParams['variant_id'] = $this->apiClient->getSerializer()->toQueryValue($variant_id);
        }
        // query params
        if ($product_id !== null) {
            $queryParams['product_id'] = $this->apiClient->getSerializer()->toQueryValue($product_id);
        }
        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = $this->apiClient->getSerializer()->toQueryValue($price);
        }
        // query params
        if ($sale_price !== null) {
            $queryParams['sale_price'] = $this->apiClient->getSerializer()->toQueryValue($sale_price);
        }
        // query params
        if ($retail_price !== null) {
            $queryParams['retail_price'] = $this->apiClient->getSerializer()->toQueryValue($retail_price);
        }
        // query params
        if ($map_price !== null) {
            $queryParams['map_price'] = $this->apiClient->getSerializer()->toQueryValue($map_price);
        }
        // query params
        if ($calculated_price !== null) {
            $queryParams['calculated_price'] = $this->apiClient->getSerializer()->toQueryValue($calculated_price);
        }
        // query params
        if ($date_created !== null) {
            $queryParams['date_created'] = $this->apiClient->getSerializer()->toQueryValue($date_created);
        }
        // query params
        if ($date_modified !== null) {
            $queryParams['date_modified'] = $this->apiClient->getSerializer()->toQueryValue($date_modified);
        }
        // query params
        if ($sku !== null) {
            $queryParams['sku'] = $this->apiClient->getSerializer()->toQueryValue($sku);
        }
        // path params
        if ($price_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceRecordCollectionResponse',
                '/pricelists/{price_list_id}/records'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceRecordCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceRecordCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPriceListRecordsByVariantId
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\PriceRecordCollectionResponse
     */
    public function getPriceListRecordsByVariantId($price_list_id, $variant_id)
    {
        list($response) = $this->getPriceListRecordsByVariantIdWithHttpInfo($price_list_id, $variant_id);
        return $response;
    }

    /**
     * Operation getPriceListRecordsByVariantIdWithHttpInfo
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\PriceRecordCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPriceListRecordsByVariantIdWithHttpInfo($price_list_id, $variant_id)
    {
        // verify the required parameter 'price_list_id' is set
        if ($price_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling getPriceListRecordsByVariantId');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling getPriceListRecordsByVariantId');
        }
        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records/{variant_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($price_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceRecordCollectionResponse',
                '/pricelists/{price_list_id}/records/{variant_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceRecordCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceRecordCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setPriceListRecord
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param string $currency_code The currency code associated with the price record being acted upon. (required)
     * @param \BigCommerce\Api\v3\Model\PriceRecordPut $price_record A BigCommerce &#x60;Price Record&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\PriceRecordResponse
     */
    public function setPriceListRecord($price_list_id, $variant_id, $currency_code, $price_record)
    {
        list($response) = $this->setPriceListRecordWithHttpInfo($price_list_id, $variant_id, $currency_code, $price_record);
        return $response;
    }

    /**
     * Operation setPriceListRecordWithHttpInfo
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param string $currency_code The currency code associated with the price record being acted upon. (required)
     * @param \BigCommerce\Api\v3\Model\PriceRecordPut $price_record A BigCommerce &#x60;Price Record&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\PriceRecordResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPriceListRecordWithHttpInfo($price_list_id, $variant_id, $currency_code, $price_record)
    {
        // verify the required parameter 'price_list_id' is set
        if ($price_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling setPriceListRecord');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling setPriceListRecord');
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling setPriceListRecord');
        }
        // verify the required parameter 'price_record' is set
        if ($price_record === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_record when calling setPriceListRecord');
        }
        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records/{variant_id}/{currency_code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($price_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // path params
        if ($currency_code !== null) {
            $resourcePath = str_replace(
                "{" . "currency_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($currency_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($price_record)) {
            $_tempBody = $price_record;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceRecordResponse',
                '/pricelists/{price_list_id}/records/{variant_id}/{currency_code}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceRecordResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceRecordResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setPriceListRecordCollection
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param \BigCommerce\Api\v3\Model\PriceRecordCollectionPut $price_record_batch A BigCommerce &#x60;Price Record&#x60; request. (required)
     * @param int $x_strict_mode Header that determines whether the Batch API operates in strict mode or not.  Strict mode will reject the entire request if any item in the batch has an error. (optional, default to 0)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\SuccessBatchResponse
     */
    public function setPriceListRecordCollection($price_list_id, $price_record_batch, $x_strict_mode = null)
    {
        list($response) = $this->setPriceListRecordCollectionWithHttpInfo($price_list_id, $price_record_batch, $x_strict_mode);
        return $response;
    }

    /**
     * Operation setPriceListRecordCollectionWithHttpInfo
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param \BigCommerce\Api\v3\Model\PriceRecordCollectionPut $price_record_batch A BigCommerce &#x60;Price Record&#x60; request. (required)
     * @param int $x_strict_mode Header that determines whether the Batch API operates in strict mode or not.  Strict mode will reject the entire request if any item in the batch has an error. (optional, default to 0)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\SuccessBatchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPriceListRecordCollectionWithHttpInfo($price_list_id, $price_record_batch, $x_strict_mode = null)
    {
        // verify the required parameter 'price_list_id' is set
        if ($price_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling setPriceListRecordCollection');
        }
        // verify the required parameter 'price_record_batch' is set
        if ($price_record_batch === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_record_batch when calling setPriceListRecordCollection');
        }
        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_strict_mode !== null) {
            $headerParams['X-Strict-Mode'] = $this->apiClient->getSerializer()->toHeaderValue($x_strict_mode);
        }
        // path params
        if ($price_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($price_record_batch)) {
            $_tempBody = $price_record_batch;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\SuccessBatchResponse',
                '/pricelists/{price_list_id}/records'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\SuccessBatchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\SuccessBatchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceRecordBatchErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePriceList
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param \BigCommerce\Api\v3\Model\PriceListPut $price_list A BigCommerce &#x60;Price List&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\PriceListResponse
     */
    public function updatePriceList($price_list_id, $price_list)
    {
        list($response) = $this->updatePriceListWithHttpInfo($price_list_id, $price_list);
        return $response;
    }

    /**
     * Operation updatePriceListWithHttpInfo
     *
     * 
     *
     * @param int $price_list_id The ID of the &#x60;Price List&#x60; requested. (required)
     * @param \BigCommerce\Api\v3\Model\PriceListPut $price_list A BigCommerce &#x60;Price List&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\PriceListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePriceListWithHttpInfo($price_list_id, $price_list)
    {
        // verify the required parameter 'price_list_id' is set
        if ($price_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling updatePriceList');
        }
        // verify the required parameter 'price_list' is set
        if ($price_list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list when calling updatePriceList');
        }
        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($price_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($price_list)) {
            $_tempBody = $price_list;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceListResponse',
                '/pricelists/{price_list_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
