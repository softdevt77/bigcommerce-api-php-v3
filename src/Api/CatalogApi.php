<?php
/**
 * CatalogApi
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BigCommerce API
 *
 * A Swagger Document for the BigCommmerce v3 API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\v3\Api;

use \BigCommerce\Api\v3\ApiClient;
use \BigCommerce\Api\v3\ApiException;
use \BigCommerce\Api\v3\Configuration;
use \BigCommerce\Api\v3\ObjectSerializer;

/**
 * CatalogApi Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CatalogApi
{
    /**
     * API Client
     *
     * @var \BigCommerce\Api\v3\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BigCommerce\Api\v3\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\BigCommerce\Api\v3\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.bigcommerce.com/stores/{{store_id}}/v3');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \BigCommerce\Api\v3\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \BigCommerce\Api\v3\ApiClient $apiClient set the API client
     *
     * @return CatalogApi
     */
    public function setApiClient(\BigCommerce\Api\v3\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation catalogSummaryGet
     *
     * 
     *
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\CatalogSummaryResponse
     */
    public function catalogSummaryGet()
    {
        list($response) = $this->catalogSummaryGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation catalogSummaryGetWithHttpInfo
     *
     * 
     *
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\CatalogSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogSummaryGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/catalog/summary";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CatalogSummaryResponse',
                '/catalog/summary'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CatalogSummaryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CatalogSummaryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBrand
     *
     * 
     *
     * @param \BigCommerce\Api\v3\Model\BrandPost $brand A &#x60;Brand&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\BrandResponse
     */
    public function createBrand($brand)
    {
        list($response) = $this->createBrandWithHttpInfo($brand);
        return $response;
    }

    /**
     * Operation createBrandWithHttpInfo
     *
     * 
     *
     * @param \BigCommerce\Api\v3\Model\BrandPost $brand A &#x60;Brand&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\BrandResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBrandWithHttpInfo($brand)
    {
        // verify the required parameter 'brand' is set
        if ($brand === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand when calling createBrand');
        }
        // parse inputs
        $resourcePath = "/catalog/brands";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($brand)) {
            $_tempBody = $brand;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BrandResponse',
                '/catalog/brands'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BrandResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BrandResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBrandImage
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param \SplFileObject $image_file An image file. Supported MIME types include GIF, JPEG, and PNG. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ImageResponse
     */
    public function createBrandImage($brand_id, $image_file)
    {
        list($response) = $this->createBrandImageWithHttpInfo($brand_id, $image_file);
        return $response;
    }

    /**
     * Operation createBrandImageWithHttpInfo
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param \SplFileObject $image_file An image file. Supported MIME types include GIF, JPEG, and PNG. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ImageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBrandImageWithHttpInfo($brand_id, $image_file)
    {
        // verify the required parameter 'brand_id' is set
        if ($brand_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling createBrandImage');
        }
        // verify the required parameter 'image_file' is set
        if ($image_file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $image_file when calling createBrandImage');
        }
        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($image_file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['image_file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($image_file));
            } else {
                $formParams['image_file'] = '@' . $this->apiClient->getSerializer()->toFormValue($image_file);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ImageResponse',
                '/catalog/brands/{brand_id}/image'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ImageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ImageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBrandMetafield
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPost $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetafieldResponse
     */
    public function createBrandMetafield($brand_id, $metafield)
    {
        list($response) = $this->createBrandMetafieldWithHttpInfo($brand_id, $metafield);
        return $response;
    }

    /**
     * Operation createBrandMetafieldWithHttpInfo
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPost $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetafieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBrandMetafieldWithHttpInfo($brand_id, $metafield)
    {
        // verify the required parameter 'brand_id' is set
        if ($brand_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling createBrandMetafield');
        }
        // verify the required parameter 'metafield' is set
        if ($metafield === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling createBrandMetafield');
        }
        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
            $_tempBody = $metafield;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse',
                '/catalog/brands/{brand_id}/metafields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBulkPricingRule
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\BulkPricingRulePost $bulk_pricing_rule &#x60;BulkPricingRule&#x60; object. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\BulkPricingRuleResponse
     */
    public function createBulkPricingRule($product_id, $bulk_pricing_rule, $page = null, $limit = null)
    {
        list($response) = $this->createBulkPricingRuleWithHttpInfo($product_id, $bulk_pricing_rule, $page, $limit);
        return $response;
    }

    /**
     * Operation createBulkPricingRuleWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\BulkPricingRulePost $bulk_pricing_rule &#x60;BulkPricingRule&#x60; object. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\BulkPricingRuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBulkPricingRuleWithHttpInfo($product_id, $bulk_pricing_rule, $page = null, $limit = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createBulkPricingRule');
        }
        // verify the required parameter 'bulk_pricing_rule' is set
        if ($bulk_pricing_rule === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bulk_pricing_rule when calling createBulkPricingRule');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/bulk-pricing-rules";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($bulk_pricing_rule)) {
            $_tempBody = $bulk_pricing_rule;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse',
                '/catalog/products/{product_id}/bulk-pricing-rules'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCategory
     *
     * 
     *
     * @param \BigCommerce\Api\v3\Model\CategoryPost $category A BigCommerce &#x60;Category&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\CategoryResponse
     */
    public function createCategory($category)
    {
        list($response) = $this->createCategoryWithHttpInfo($category);
        return $response;
    }

    /**
     * Operation createCategoryWithHttpInfo
     *
     * 
     *
     * @param \BigCommerce\Api\v3\Model\CategoryPost $category A BigCommerce &#x60;Category&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\CategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCategoryWithHttpInfo($category)
    {
        // verify the required parameter 'category' is set
        if ($category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category when calling createCategory');
        }
        // parse inputs
        $resourcePath = "/catalog/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($category)) {
            $_tempBody = $category;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CategoryResponse',
                '/catalog/categories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CategoryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CategoryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCategoryImage
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param \SplFileObject $image_file An image file. Supported MIME types include GIF, JPEG, and PNG. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ImageResponse
     */
    public function createCategoryImage($category_id, $image_file)
    {
        list($response) = $this->createCategoryImageWithHttpInfo($category_id, $image_file);
        return $response;
    }

    /**
     * Operation createCategoryImageWithHttpInfo
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param \SplFileObject $image_file An image file. Supported MIME types include GIF, JPEG, and PNG. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ImageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCategoryImageWithHttpInfo($category_id, $image_file)
    {
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling createCategoryImage');
        }
        // verify the required parameter 'image_file' is set
        if ($image_file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $image_file when calling createCategoryImage');
        }
        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($image_file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['image_file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($image_file));
            } else {
                $formParams['image_file'] = '@' . $this->apiClient->getSerializer()->toFormValue($image_file);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ImageResponse',
                '/catalog/categories/{category_id}/image'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ImageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ImageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCategoryMetafield
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPost $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetafieldResponse
     */
    public function createCategoryMetafield($category_id, $metafield)
    {
        list($response) = $this->createCategoryMetafieldWithHttpInfo($category_id, $metafield);
        return $response;
    }

    /**
     * Operation createCategoryMetafieldWithHttpInfo
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPost $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetafieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCategoryMetafieldWithHttpInfo($category_id, $metafield)
    {
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling createCategoryMetafield');
        }
        // verify the required parameter 'metafield' is set
        if ($metafield === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling createCategoryMetafield');
        }
        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
            $_tempBody = $metafield;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse',
                '/catalog/categories/{category_id}/metafields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createComplexRule
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ComplexRulePost $complex_rule &#x60;ComplexRule&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ComplexRuleResponse
     */
    public function createComplexRule($product_id, $complex_rule)
    {
        list($response) = $this->createComplexRuleWithHttpInfo($product_id, $complex_rule);
        return $response;
    }

    /**
     * Operation createComplexRuleWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ComplexRulePost $complex_rule &#x60;ComplexRule&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ComplexRuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createComplexRuleWithHttpInfo($product_id, $complex_rule)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createComplexRule');
        }
        // verify the required parameter 'complex_rule' is set
        if ($complex_rule === null) {
            throw new \InvalidArgumentException('Missing the required parameter $complex_rule when calling createComplexRule');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/complex-rules";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($complex_rule)) {
            $_tempBody = $complex_rule;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ComplexRuleResponse',
                '/catalog/products/{product_id}/complex-rules'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ComplexRuleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ComplexRuleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createConfigurableField
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ConfigurableFieldPost $configurable_field &#x60;ConfigurableField&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ConfigurableFieldResponse
     */
    public function createConfigurableField($product_id, $configurable_field)
    {
        list($response) = $this->createConfigurableFieldWithHttpInfo($product_id, $configurable_field);
        return $response;
    }

    /**
     * Operation createConfigurableFieldWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ConfigurableFieldPost $configurable_field &#x60;ConfigurableField&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ConfigurableFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createConfigurableFieldWithHttpInfo($product_id, $configurable_field)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createConfigurableField');
        }
        // verify the required parameter 'configurable_field' is set
        if ($configurable_field === null) {
            throw new \InvalidArgumentException('Missing the required parameter $configurable_field when calling createConfigurableField');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/configurable-fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($configurable_field)) {
            $_tempBody = $configurable_field;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse',
                '/catalog/products/{product_id}/configurable-fields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCustomField
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\CustomFieldPost $custom_field &#x60;CustomField&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\CustomFieldResponse
     */
    public function createCustomField($product_id, $custom_field)
    {
        list($response) = $this->createCustomFieldWithHttpInfo($product_id, $custom_field);
        return $response;
    }

    /**
     * Operation createCustomFieldWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\CustomFieldPost $custom_field &#x60;CustomField&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\CustomFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCustomFieldWithHttpInfo($product_id, $custom_field)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createCustomField');
        }
        // verify the required parameter 'custom_field' is set
        if ($custom_field === null) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_field when calling createCustomField');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/custom-fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($custom_field)) {
            $_tempBody = $custom_field;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CustomFieldResponse',
                '/catalog/products/{product_id}/custom-fields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CustomFieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CustomFieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createModifier
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ModifierPost $modifier A &#x60;Modifier&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ModifierResponse
     */
    public function createModifier($product_id, $modifier)
    {
        list($response) = $this->createModifierWithHttpInfo($product_id, $modifier);
        return $response;
    }

    /**
     * Operation createModifierWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ModifierPost $modifier A &#x60;Modifier&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ModifierResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createModifierWithHttpInfo($product_id, $modifier)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createModifier');
        }
        // verify the required parameter 'modifier' is set
        if ($modifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier when calling createModifier');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($modifier)) {
            $_tempBody = $modifier;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierResponse',
                '/catalog/products/{product_id}/modifiers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createModifierImage
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param \SplFileObject $image_file An image file. Supported MIME types include GIF, JPEG, and PNG. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ImageResponse
     */
    public function createModifierImage($product_id, $modifier_id, $value_id, $image_file)
    {
        list($response) = $this->createModifierImageWithHttpInfo($product_id, $modifier_id, $value_id, $image_file);
        return $response;
    }

    /**
     * Operation createModifierImageWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param \SplFileObject $image_file An image file. Supported MIME types include GIF, JPEG, and PNG. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ImageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createModifierImageWithHttpInfo($product_id, $modifier_id, $value_id, $image_file)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createModifierImage');
        }
        // verify the required parameter 'modifier_id' is set
        if ($modifier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling createModifierImage');
        }
        // verify the required parameter 'value_id' is set
        if ($value_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling createModifierImage');
        }
        // verify the required parameter 'image_file' is set
        if ($image_file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $image_file when calling createModifierImage');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // path params
        if ($value_id !== null) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($image_file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['image_file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($image_file));
            } else {
                $formParams['image_file'] = '@' . $this->apiClient->getSerializer()->toFormValue($image_file);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ImageResponse',
                '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ImageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ImageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createModifierValue
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\ModifierValuePost $modifier_value A &#x60;ModifierValue&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ModifierValueResponse
     */
    public function createModifierValue($product_id, $modifier_id, $modifier_value)
    {
        list($response) = $this->createModifierValueWithHttpInfo($product_id, $modifier_id, $modifier_value);
        return $response;
    }

    /**
     * Operation createModifierValueWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\ModifierValuePost $modifier_value A &#x60;ModifierValue&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ModifierValueResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createModifierValueWithHttpInfo($product_id, $modifier_id, $modifier_value)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createModifierValue');
        }
        // verify the required parameter 'modifier_id' is set
        if ($modifier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling createModifierValue');
        }
        // verify the required parameter 'modifier_value' is set
        if ($modifier_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_value when calling createModifierValue');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($modifier_value)) {
            $_tempBody = $modifier_value;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierValueResponse',
                '/catalog/products/{product_id}/modifiers/{modifier_id}/values'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierValueResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierValueResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createOption
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\OptionPost $option An &#x60;Option&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\OptionResponse
     */
    public function createOption($product_id, $option)
    {
        list($response) = $this->createOptionWithHttpInfo($product_id, $option);
        return $response;
    }

    /**
     * Operation createOptionWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\OptionPost $option An &#x60;Option&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\OptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOptionWithHttpInfo($product_id, $option)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createOption');
        }
        // verify the required parameter 'option' is set
        if ($option === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option when calling createOption');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($option)) {
            $_tempBody = $option;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionResponse',
                '/catalog/products/{product_id}/options'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createOptionValue
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\OptionValuePost $option_value A &#x60;OptionValue&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\OptionValueResponse
     */
    public function createOptionValue($product_id, $option_id, $option_value)
    {
        list($response) = $this->createOptionValueWithHttpInfo($product_id, $option_id, $option_value);
        return $response;
    }

    /**
     * Operation createOptionValueWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\OptionValuePost $option_value A &#x60;OptionValue&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\OptionValueResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOptionValueWithHttpInfo($product_id, $option_id, $option_value)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createOptionValue');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling createOptionValue');
        }
        // verify the required parameter 'option_value' is set
        if ($option_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_value when calling createOptionValue');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}/values";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($option_value)) {
            $_tempBody = $option_value;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionValueResponse',
                '/catalog/products/{product_id}/options/{option_id}/values'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionValueResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionValueResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProduct
     *
     * 
     *
     * @param \BigCommerce\Api\v3\Model\ProductPost $product A BigCommerce &#x60;Product&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductResponse
     */
    public function createProduct($product)
    {
        list($response) = $this->createProductWithHttpInfo($product);
        return $response;
    }

    /**
     * Operation createProductWithHttpInfo
     *
     * 
     *
     * @param \BigCommerce\Api\v3\Model\ProductPost $product A BigCommerce &#x60;Product&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductWithHttpInfo($product)
    {
        // verify the required parameter 'product' is set
        if ($product === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product when calling createProduct');
        }
        // parse inputs
        $resourcePath = "/catalog/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product)) {
            $_tempBody = $product;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductResponse',
                '/catalog/products'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProductImage
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ProductImagePost $product_image A BigCommerce &#x60;ProductImage&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductImageResponse
     */
    public function createProductImage($product_id, $product_image)
    {
        list($response) = $this->createProductImageWithHttpInfo($product_id, $product_image);
        return $response;
    }

    /**
     * Operation createProductImageWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ProductImagePost $product_image A BigCommerce &#x60;ProductImage&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductImageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductImageWithHttpInfo($product_id, $product_image)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createProductImage');
        }
        // verify the required parameter 'product_image' is set
        if ($product_image === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_image when calling createProductImage');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/images";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product_image)) {
            $_tempBody = $product_image;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductImageResponse',
                '/catalog/products/{product_id}/images'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductImageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductImageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProductMetafield
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPost $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetafieldResponse
     */
    public function createProductMetafield($product_id, $metafield)
    {
        list($response) = $this->createProductMetafieldWithHttpInfo($product_id, $metafield);
        return $response;
    }

    /**
     * Operation createProductMetafieldWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPost $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetafieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductMetafieldWithHttpInfo($product_id, $metafield)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createProductMetafield');
        }
        // verify the required parameter 'metafield' is set
        if ($metafield === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling createProductMetafield');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
            $_tempBody = $metafield;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse',
                '/catalog/products/{product_id}/metafields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProductReview
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ProductReviewPost $product_review A BigCommerce &#x60;ProductReview&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductReviewResponse
     */
    public function createProductReview($product_id, $product_review)
    {
        list($response) = $this->createProductReviewWithHttpInfo($product_id, $product_review);
        return $response;
    }

    /**
     * Operation createProductReviewWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ProductReviewPost $product_review A BigCommerce &#x60;ProductReview&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductReviewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductReviewWithHttpInfo($product_id, $product_review)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createProductReview');
        }
        // verify the required parameter 'product_review' is set
        if ($product_review === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_review when calling createProductReview');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/reviews";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product_review)) {
            $_tempBody = $product_review;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductReviewResponse',
                '/catalog/products/{product_id}/reviews'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductReviewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductReviewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProductVideo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ProductVideoPost $product_video A BigCommerce &#x60;ProductVideo&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductVideoResponse
     */
    public function createProductVideo($product_id, $product_video)
    {
        list($response) = $this->createProductVideoWithHttpInfo($product_id, $product_video);
        return $response;
    }

    /**
     * Operation createProductVideoWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ProductVideoPost $product_video A BigCommerce &#x60;ProductVideo&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductVideoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductVideoWithHttpInfo($product_id, $product_video)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createProductVideo');
        }
        // verify the required parameter 'product_video' is set
        if ($product_video === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_video when calling createProductVideo');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/videos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product_video)) {
            $_tempBody = $product_video;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductVideoResponse',
                '/catalog/products/{product_id}/videos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductVideoResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductVideoResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createVariant
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\VariantPost $variant &#x60;Variant&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\VariantResponse
     */
    public function createVariant($product_id, $variant)
    {
        list($response) = $this->createVariantWithHttpInfo($product_id, $variant);
        return $response;
    }

    /**
     * Operation createVariantWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\VariantPost $variant &#x60;Variant&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\VariantResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVariantWithHttpInfo($product_id, $variant)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createVariant');
        }
        // verify the required parameter 'variant' is set
        if ($variant === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant when calling createVariant');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($variant)) {
            $_tempBody = $variant;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\VariantResponse',
                '/catalog/products/{product_id}/variants'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\VariantResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\VariantResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createVariantImage
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param \SplFileObject $image_file An image file. Supported MIME types include GIF, JPEG, and PNG. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ImageResponse
     */
    public function createVariantImage($product_id, $variant_id, $image_file)
    {
        list($response) = $this->createVariantImageWithHttpInfo($product_id, $variant_id, $image_file);
        return $response;
    }

    /**
     * Operation createVariantImageWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param \SplFileObject $image_file An image file. Supported MIME types include GIF, JPEG, and PNG. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ImageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVariantImageWithHttpInfo($product_id, $variant_id, $image_file)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createVariantImage');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling createVariantImage');
        }
        // verify the required parameter 'image_file' is set
        if ($image_file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $image_file when calling createVariantImage');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($image_file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['image_file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($image_file));
            } else {
                $formParams['image_file'] = '@' . $this->apiClient->getSerializer()->toFormValue($image_file);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ImageResponse',
                '/catalog/products/{product_id}/variants/{variant_id}/image'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ImageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ImageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createVariantMetafield
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPost $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetafieldResponse
     */
    public function createVariantMetafield($product_id, $variant_id, $metafield)
    {
        list($response) = $this->createVariantMetafieldWithHttpInfo($product_id, $variant_id, $metafield);
        return $response;
    }

    /**
     * Operation createVariantMetafieldWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPost $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetafieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVariantMetafieldWithHttpInfo($product_id, $variant_id, $metafield)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling createVariantMetafield');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling createVariantMetafield');
        }
        // verify the required parameter 'metafield' is set
        if ($metafield === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling createVariantMetafield');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
            $_tempBody = $metafield;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse',
                '/catalog/products/{product_id}/variants/{variant_id}/metafields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteBrandById
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteBrandById($brand_id)
    {
        list($response) = $this->deleteBrandByIdWithHttpInfo($brand_id);
        return $response;
    }

    /**
     * Operation deleteBrandByIdWithHttpInfo
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBrandByIdWithHttpInfo($brand_id)
    {
        // verify the required parameter 'brand_id' is set
        if ($brand_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling deleteBrandById');
        }
        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/brands/{brand_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteBrandImage
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteBrandImage($brand_id)
    {
        list($response) = $this->deleteBrandImageWithHttpInfo($brand_id);
        return $response;
    }

    /**
     * Operation deleteBrandImageWithHttpInfo
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBrandImageWithHttpInfo($brand_id)
    {
        // verify the required parameter 'brand_id' is set
        if ($brand_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling deleteBrandImage');
        }
        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/brands/{brand_id}/image'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteBrandMetafieldById
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteBrandMetafieldById($metafield_id, $brand_id)
    {
        list($response) = $this->deleteBrandMetafieldByIdWithHttpInfo($metafield_id, $brand_id);
        return $response;
    }

    /**
     * Operation deleteBrandMetafieldByIdWithHttpInfo
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBrandMetafieldByIdWithHttpInfo($metafield_id, $brand_id)
    {
        // verify the required parameter 'metafield_id' is set
        if ($metafield_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling deleteBrandMetafieldById');
        }
        // verify the required parameter 'brand_id' is set
        if ($brand_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling deleteBrandMetafieldById');
        }
        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($metafield_id !== null) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }
        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/brands/{brand_id}/metafields/{metafield_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteBrands
     *
     * 
     *
     * @param string $name Filter items by name. (optional)
     * @param string $page_title Filter items by page_title. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteBrands($name = null, $page_title = null)
    {
        list($response) = $this->deleteBrandsWithHttpInfo($name, $page_title);
        return $response;
    }

    /**
     * Operation deleteBrandsWithHttpInfo
     *
     * 
     *
     * @param string $name Filter items by name. (optional)
     * @param string $page_title Filter items by page_title. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBrandsWithHttpInfo($name = null, $page_title = null)
    {
        // parse inputs
        $resourcePath = "/catalog/brands";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($page_title !== null) {
            $queryParams['page_title'] = $this->apiClient->getSerializer()->toQueryValue($page_title);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/brands'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteBulkPricingRuleById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $bulk_pricing_rule_id The ID of the &#x60;BulkPricingRule&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteBulkPricingRuleById($product_id, $bulk_pricing_rule_id)
    {
        list($response) = $this->deleteBulkPricingRuleByIdWithHttpInfo($product_id, $bulk_pricing_rule_id);
        return $response;
    }

    /**
     * Operation deleteBulkPricingRuleByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $bulk_pricing_rule_id The ID of the &#x60;BulkPricingRule&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBulkPricingRuleByIdWithHttpInfo($product_id, $bulk_pricing_rule_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteBulkPricingRuleById');
        }
        // verify the required parameter 'bulk_pricing_rule_id' is set
        if ($bulk_pricing_rule_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bulk_pricing_rule_id when calling deleteBulkPricingRuleById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($bulk_pricing_rule_id !== null) {
            $resourcePath = str_replace(
                "{" . "bulk_pricing_rule_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bulk_pricing_rule_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCategories
     *
     * 
     *
     * @param string $name Filter items by name. (optional)
     * @param int $parent_id Filter items by parent_id. (optional)
     * @param string $page_title Filter items by page_title. (optional)
     * @param string $keyword Filter items by keywords. (optional)
     * @param int $is_visible Filter items by is_visible. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteCategories($name = null, $parent_id = null, $page_title = null, $keyword = null, $is_visible = null)
    {
        list($response) = $this->deleteCategoriesWithHttpInfo($name, $parent_id, $page_title, $keyword, $is_visible);
        return $response;
    }

    /**
     * Operation deleteCategoriesWithHttpInfo
     *
     * 
     *
     * @param string $name Filter items by name. (optional)
     * @param int $parent_id Filter items by parent_id. (optional)
     * @param string $page_title Filter items by page_title. (optional)
     * @param string $keyword Filter items by keywords. (optional)
     * @param int $is_visible Filter items by is_visible. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCategoriesWithHttpInfo($name = null, $parent_id = null, $page_title = null, $keyword = null, $is_visible = null)
    {
        // parse inputs
        $resourcePath = "/catalog/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($parent_id !== null) {
            $queryParams['parent_id'] = $this->apiClient->getSerializer()->toQueryValue($parent_id);
        }
        // query params
        if ($page_title !== null) {
            $queryParams['page_title'] = $this->apiClient->getSerializer()->toQueryValue($page_title);
        }
        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }
        // query params
        if ($is_visible !== null) {
            $queryParams['is_visible'] = $this->apiClient->getSerializer()->toQueryValue($is_visible);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/categories'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCategoryById
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteCategoryById($category_id)
    {
        list($response) = $this->deleteCategoryByIdWithHttpInfo($category_id);
        return $response;
    }

    /**
     * Operation deleteCategoryByIdWithHttpInfo
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCategoryByIdWithHttpInfo($category_id)
    {
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling deleteCategoryById');
        }
        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/categories/{category_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCategoryImage
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteCategoryImage($category_id)
    {
        list($response) = $this->deleteCategoryImageWithHttpInfo($category_id);
        return $response;
    }

    /**
     * Operation deleteCategoryImageWithHttpInfo
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCategoryImageWithHttpInfo($category_id)
    {
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling deleteCategoryImage');
        }
        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/categories/{category_id}/image'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCategoryMetafieldById
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteCategoryMetafieldById($metafield_id, $category_id)
    {
        list($response) = $this->deleteCategoryMetafieldByIdWithHttpInfo($metafield_id, $category_id);
        return $response;
    }

    /**
     * Operation deleteCategoryMetafieldByIdWithHttpInfo
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCategoryMetafieldByIdWithHttpInfo($metafield_id, $category_id)
    {
        // verify the required parameter 'metafield_id' is set
        if ($metafield_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling deleteCategoryMetafieldById');
        }
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling deleteCategoryMetafieldById');
        }
        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($metafield_id !== null) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }
        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/categories/{category_id}/metafields/{metafield_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteComplexRuleById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $complex_rule_id The ID of the &#x60;ComplexRule&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteComplexRuleById($product_id, $complex_rule_id)
    {
        list($response) = $this->deleteComplexRuleByIdWithHttpInfo($product_id, $complex_rule_id);
        return $response;
    }

    /**
     * Operation deleteComplexRuleByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $complex_rule_id The ID of the &#x60;ComplexRule&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteComplexRuleByIdWithHttpInfo($product_id, $complex_rule_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteComplexRuleById');
        }
        // verify the required parameter 'complex_rule_id' is set
        if ($complex_rule_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $complex_rule_id when calling deleteComplexRuleById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/complex-rules/{complex_rule_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($complex_rule_id !== null) {
            $resourcePath = str_replace(
                "{" . "complex_rule_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($complex_rule_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/complex-rules/{complex_rule_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteConfigurableFieldById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $configurable_field_id The ID of the &#x60;ConfigurableField&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteConfigurableFieldById($product_id, $configurable_field_id)
    {
        list($response) = $this->deleteConfigurableFieldByIdWithHttpInfo($product_id, $configurable_field_id);
        return $response;
    }

    /**
     * Operation deleteConfigurableFieldByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $configurable_field_id The ID of the &#x60;ConfigurableField&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConfigurableFieldByIdWithHttpInfo($product_id, $configurable_field_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteConfigurableFieldById');
        }
        // verify the required parameter 'configurable_field_id' is set
        if ($configurable_field_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $configurable_field_id when calling deleteConfigurableFieldById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/configurable-fields/{configurable_field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($configurable_field_id !== null) {
            $resourcePath = str_replace(
                "{" . "configurable_field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($configurable_field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/configurable-fields/{configurable_field_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCustomFieldById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $custom_field_id The ID of the &#x60;CustomField&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteCustomFieldById($product_id, $custom_field_id)
    {
        list($response) = $this->deleteCustomFieldByIdWithHttpInfo($product_id, $custom_field_id);
        return $response;
    }

    /**
     * Operation deleteCustomFieldByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $custom_field_id The ID of the &#x60;CustomField&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomFieldByIdWithHttpInfo($product_id, $custom_field_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteCustomFieldById');
        }
        // verify the required parameter 'custom_field_id' is set
        if ($custom_field_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_field_id when calling deleteCustomFieldById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/custom-fields/{custom_field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($custom_field_id !== null) {
            $resourcePath = str_replace(
                "{" . "custom_field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($custom_field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/custom-fields/{custom_field_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteModifierById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteModifierById($product_id, $modifier_id)
    {
        list($response) = $this->deleteModifierByIdWithHttpInfo($product_id, $modifier_id);
        return $response;
    }

    /**
     * Operation deleteModifierByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteModifierByIdWithHttpInfo($product_id, $modifier_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteModifierById');
        }
        // verify the required parameter 'modifier_id' is set
        if ($modifier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling deleteModifierById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/modifiers/{modifier_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteModifierImage
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteModifierImage($product_id, $modifier_id, $value_id)
    {
        list($response) = $this->deleteModifierImageWithHttpInfo($product_id, $modifier_id, $value_id);
        return $response;
    }

    /**
     * Operation deleteModifierImageWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteModifierImageWithHttpInfo($product_id, $modifier_id, $value_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteModifierImage');
        }
        // verify the required parameter 'modifier_id' is set
        if ($modifier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling deleteModifierImage');
        }
        // verify the required parameter 'value_id' is set
        if ($value_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling deleteModifierImage');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // path params
        if ($value_id !== null) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteModifierValueById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier/Option Value&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteModifierValueById($product_id, $modifier_id, $value_id)
    {
        list($response) = $this->deleteModifierValueByIdWithHttpInfo($product_id, $modifier_id, $value_id);
        return $response;
    }

    /**
     * Operation deleteModifierValueByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier/Option Value&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteModifierValueByIdWithHttpInfo($product_id, $modifier_id, $value_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteModifierValueById');
        }
        // verify the required parameter 'modifier_id' is set
        if ($modifier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling deleteModifierValueById');
        }
        // verify the required parameter 'value_id' is set
        if ($value_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling deleteModifierValueById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // path params
        if ($value_id !== null) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteOptionById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteOptionById($product_id, $option_id)
    {
        list($response) = $this->deleteOptionByIdWithHttpInfo($product_id, $option_id);
        return $response;
    }

    /**
     * Operation deleteOptionByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOptionByIdWithHttpInfo($product_id, $option_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteOptionById');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling deleteOptionById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/options/{option_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteOptionValueById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier/Option Value&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteOptionValueById($product_id, $option_id, $value_id)
    {
        list($response) = $this->deleteOptionValueByIdWithHttpInfo($product_id, $option_id, $value_id);
        return $response;
    }

    /**
     * Operation deleteOptionValueByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier/Option Value&#x60;. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOptionValueByIdWithHttpInfo($product_id, $option_id, $value_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteOptionValueById');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling deleteOptionValueById');
        }
        // verify the required parameter 'value_id' is set
        if ($value_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling deleteOptionValueById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}/values/{value_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // path params
        if ($value_id !== null) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/options/{option_id}/values/{value_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProductById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteProductById($product_id)
    {
        list($response) = $this->deleteProductByIdWithHttpInfo($product_id);
        return $response;
    }

    /**
     * Operation deleteProductByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductByIdWithHttpInfo($product_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteProductById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProductImage
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $image_id The ID of the &#x60;Image&#x60; that is being operated on. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteProductImage($product_id, $image_id)
    {
        list($response) = $this->deleteProductImageWithHttpInfo($product_id, $image_id);
        return $response;
    }

    /**
     * Operation deleteProductImageWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $image_id The ID of the &#x60;Image&#x60; that is being operated on. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductImageWithHttpInfo($product_id, $image_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteProductImage');
        }
        // verify the required parameter 'image_id' is set
        if ($image_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $image_id when calling deleteProductImage');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/images/{image_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($image_id !== null) {
            $resourcePath = str_replace(
                "{" . "image_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($image_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/images/{image_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProductMetafieldById
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteProductMetafieldById($metafield_id, $product_id)
    {
        list($response) = $this->deleteProductMetafieldByIdWithHttpInfo($metafield_id, $product_id);
        return $response;
    }

    /**
     * Operation deleteProductMetafieldByIdWithHttpInfo
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductMetafieldByIdWithHttpInfo($metafield_id, $product_id)
    {
        // verify the required parameter 'metafield_id' is set
        if ($metafield_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling deleteProductMetafieldById');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteProductMetafieldById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($metafield_id !== null) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/metafields/{metafield_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProductReview
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $review_id The ID of the &#x60;review&#x60; that is being operated on. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteProductReview($product_id, $review_id)
    {
        list($response) = $this->deleteProductReviewWithHttpInfo($product_id, $review_id);
        return $response;
    }

    /**
     * Operation deleteProductReviewWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $review_id The ID of the &#x60;review&#x60; that is being operated on. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductReviewWithHttpInfo($product_id, $review_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteProductReview');
        }
        // verify the required parameter 'review_id' is set
        if ($review_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $review_id when calling deleteProductReview');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/reviews/{review_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($review_id !== null) {
            $resourcePath = str_replace(
                "{" . "review_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($review_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/reviews/{review_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProductVideo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $video_id The ID of the &#x60;Video&#x60; that is being operated on. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteProductVideo($product_id, $video_id)
    {
        list($response) = $this->deleteProductVideoWithHttpInfo($product_id, $video_id);
        return $response;
    }

    /**
     * Operation deleteProductVideoWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $video_id The ID of the &#x60;Video&#x60; that is being operated on. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductVideoWithHttpInfo($product_id, $video_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteProductVideo');
        }
        // verify the required parameter 'video_id' is set
        if ($video_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $video_id when calling deleteProductVideo');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/videos/{video_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($video_id !== null) {
            $resourcePath = str_replace(
                "{" . "video_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($video_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/videos/{video_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProducts
     *
     * 
     *
     * @param string $name Filter items by name. (optional)
     * @param string $sku Filter items by sku. (optional)
     * @param float $price Filter items by price. (optional)
     * @param float $weight Filter items by weight. (optional)
     * @param int $condition Filter items by condition. (optional)
     * @param int $brand_id Filter items by brand_id. (optional)
     * @param \DateTime $date_modified Filter items by date_modified. (optional)
     * @param \DateTime $date_last_imported Filter items by date_last_imported. (optional)
     * @param int $is_visible Filter items by is_visible. (optional)
     * @param int $is_featured Filter items by is_featured. (optional)
     * @param int $inventory_level Filter items by inventory_level. (optional)
     * @param int $total_sold Filter items by total_sold. (optional)
     * @param string $type Filter items by type: &#x60;physical&#x60; or &#x60;digital&#x60;. (optional)
     * @param int $categories Filter items by categories. (optional)
     * @param string $keyword Filter items by keywords found in the &#x60;name&#x60;, &#x60;description&#x60;, or &#x60;sku&#x60; fields, or in the brand name. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteProducts($name = null, $sku = null, $price = null, $weight = null, $condition = null, $brand_id = null, $date_modified = null, $date_last_imported = null, $is_visible = null, $is_featured = null, $inventory_level = null, $total_sold = null, $type = null, $categories = null, $keyword = null)
    {
        list($response) = $this->deleteProductsWithHttpInfo($name, $sku, $price, $weight, $condition, $brand_id, $date_modified, $date_last_imported, $is_visible, $is_featured, $inventory_level, $total_sold, $type, $categories, $keyword);
        return $response;
    }

    /**
     * Operation deleteProductsWithHttpInfo
     *
     * 
     *
     * @param string $name Filter items by name. (optional)
     * @param string $sku Filter items by sku. (optional)
     * @param float $price Filter items by price. (optional)
     * @param float $weight Filter items by weight. (optional)
     * @param int $condition Filter items by condition. (optional)
     * @param int $brand_id Filter items by brand_id. (optional)
     * @param \DateTime $date_modified Filter items by date_modified. (optional)
     * @param \DateTime $date_last_imported Filter items by date_last_imported. (optional)
     * @param int $is_visible Filter items by is_visible. (optional)
     * @param int $is_featured Filter items by is_featured. (optional)
     * @param int $inventory_level Filter items by inventory_level. (optional)
     * @param int $total_sold Filter items by total_sold. (optional)
     * @param string $type Filter items by type: &#x60;physical&#x60; or &#x60;digital&#x60;. (optional)
     * @param int $categories Filter items by categories. (optional)
     * @param string $keyword Filter items by keywords found in the &#x60;name&#x60;, &#x60;description&#x60;, or &#x60;sku&#x60; fields, or in the brand name. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductsWithHttpInfo($name = null, $sku = null, $price = null, $weight = null, $condition = null, $brand_id = null, $date_modified = null, $date_last_imported = null, $is_visible = null, $is_featured = null, $inventory_level = null, $total_sold = null, $type = null, $categories = null, $keyword = null)
    {
        // parse inputs
        $resourcePath = "/catalog/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($sku !== null) {
            $queryParams['sku'] = $this->apiClient->getSerializer()->toQueryValue($sku);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = $this->apiClient->getSerializer()->toQueryValue($price);
        }
        // query params
        if ($weight !== null) {
            $queryParams['weight'] = $this->apiClient->getSerializer()->toQueryValue($weight);
        }
        // query params
        if ($condition !== null) {
            $queryParams['condition'] = $this->apiClient->getSerializer()->toQueryValue($condition);
        }
        // query params
        if ($brand_id !== null) {
            $queryParams['brand_id'] = $this->apiClient->getSerializer()->toQueryValue($brand_id);
        }
        // query params
        if ($date_modified !== null) {
            $queryParams['date_modified'] = $this->apiClient->getSerializer()->toQueryValue($date_modified);
        }
        // query params
        if ($date_last_imported !== null) {
            $queryParams['date_last_imported'] = $this->apiClient->getSerializer()->toQueryValue($date_last_imported);
        }
        // query params
        if ($is_visible !== null) {
            $queryParams['is_visible'] = $this->apiClient->getSerializer()->toQueryValue($is_visible);
        }
        // query params
        if ($is_featured !== null) {
            $queryParams['is_featured'] = $this->apiClient->getSerializer()->toQueryValue($is_featured);
        }
        // query params
        if ($inventory_level !== null) {
            $queryParams['inventory_level'] = $this->apiClient->getSerializer()->toQueryValue($inventory_level);
        }
        // query params
        if ($total_sold !== null) {
            $queryParams['total_sold'] = $this->apiClient->getSerializer()->toQueryValue($total_sold);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($categories !== null) {
            $queryParams['categories'] = $this->apiClient->getSerializer()->toQueryValue($categories);
        }
        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteVariantById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteVariantById($product_id, $variant_id)
    {
        list($response) = $this->deleteVariantByIdWithHttpInfo($product_id, $variant_id);
        return $response;
    }

    /**
     * Operation deleteVariantByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVariantByIdWithHttpInfo($product_id, $variant_id)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteVariantById');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling deleteVariantById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/variants/{variant_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteVariantMetafieldById
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return void
     */
    public function deleteVariantMetafieldById($metafield_id, $product_id, $variant_id)
    {
        list($response) = $this->deleteVariantMetafieldByIdWithHttpInfo($metafield_id, $product_id, $variant_id);
        return $response;
    }

    /**
     * Operation deleteVariantMetafieldByIdWithHttpInfo
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVariantMetafieldByIdWithHttpInfo($metafield_id, $product_id, $variant_id)
    {
        // verify the required parameter 'metafield_id' is set
        if ($metafield_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling deleteVariantMetafieldById');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteVariantMetafieldById');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling deleteVariantMetafieldById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($metafield_id !== null) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getBrandById
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\BrandResponse
     */
    public function getBrandById($brand_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getBrandByIdWithHttpInfo($brand_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getBrandByIdWithHttpInfo
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\BrandResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBrandByIdWithHttpInfo($brand_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'brand_id' is set
        if ($brand_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling getBrandById');
        }
        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BrandResponse',
                '/catalog/brands/{brand_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BrandResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BrandResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBrandMetafieldByBrandId
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetafieldResponse
     */
    public function getBrandMetafieldByBrandId($metafield_id, $brand_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getBrandMetafieldByBrandIdWithHttpInfo($metafield_id, $brand_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getBrandMetafieldByBrandIdWithHttpInfo
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetafieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBrandMetafieldByBrandIdWithHttpInfo($metafield_id, $brand_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'metafield_id' is set
        if ($metafield_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling getBrandMetafieldByBrandId');
        }
        // verify the required parameter 'brand_id' is set
        if ($brand_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling getBrandMetafieldByBrandId');
        }
        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($metafield_id !== null) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }
        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse',
                '/catalog/brands/{brand_id}/metafields/{metafield_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBrandMetafieldsByBrandId
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $key Filter based on a metafield&#39;s key. (optional)
     * @param string $namespace Filter based on a metafield&#39;s key. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetaFieldCollectionResponse
     */
    public function getBrandMetafieldsByBrandId($brand_id, $page = null, $limit = null, $key = null, $namespace = null, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getBrandMetafieldsByBrandIdWithHttpInfo($brand_id, $page, $limit, $key, $namespace, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getBrandMetafieldsByBrandIdWithHttpInfo
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $key Filter based on a metafield&#39;s key. (optional)
     * @param string $namespace Filter based on a metafield&#39;s key. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetaFieldCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBrandMetafieldsByBrandIdWithHttpInfo($brand_id, $page = null, $limit = null, $key = null, $namespace = null, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'brand_id' is set
        if ($brand_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling getBrandMetafieldsByBrandId');
        }
        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = $this->apiClient->getSerializer()->toQueryValue($key);
        }
        // query params
        if ($namespace !== null) {
            $queryParams['namespace'] = $this->apiClient->getSerializer()->toQueryValue($namespace);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse',
                '/catalog/brands/{brand_id}/metafields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBrands
     *
     * 
     *
     * @param string $name Filter items by name. (optional)
     * @param string $page_title Filter items by page_title. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\BrandCollectionResponse
     */
    public function getBrands($name = null, $page_title = null, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getBrandsWithHttpInfo($name, $page_title, $page, $limit, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getBrandsWithHttpInfo
     *
     * 
     *
     * @param string $name Filter items by name. (optional)
     * @param string $page_title Filter items by page_title. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\BrandCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBrandsWithHttpInfo($name = null, $page_title = null, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        // parse inputs
        $resourcePath = "/catalog/brands";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($page_title !== null) {
            $queryParams['page_title'] = $this->apiClient->getSerializer()->toQueryValue($page_title);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BrandCollectionResponse',
                '/catalog/brands'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BrandCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BrandCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBulkPricingRuleById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $bulk_pricing_rule_id The ID of the &#x60;BulkPricingRule&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\BulkPricingRuleResponse
     */
    public function getBulkPricingRuleById($product_id, $bulk_pricing_rule_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getBulkPricingRuleByIdWithHttpInfo($product_id, $bulk_pricing_rule_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getBulkPricingRuleByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $bulk_pricing_rule_id The ID of the &#x60;BulkPricingRule&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\BulkPricingRuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBulkPricingRuleByIdWithHttpInfo($product_id, $bulk_pricing_rule_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getBulkPricingRuleById');
        }
        // verify the required parameter 'bulk_pricing_rule_id' is set
        if ($bulk_pricing_rule_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bulk_pricing_rule_id when calling getBulkPricingRuleById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($bulk_pricing_rule_id !== null) {
            $resourcePath = str_replace(
                "{" . "bulk_pricing_rule_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bulk_pricing_rule_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse',
                '/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBulkPricingRules
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\BulkPricingRuleCollectionResponse
     */
    public function getBulkPricingRules($product_id, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getBulkPricingRulesWithHttpInfo($product_id, $page, $limit, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getBulkPricingRulesWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\BulkPricingRuleCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBulkPricingRulesWithHttpInfo($product_id, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getBulkPricingRules');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/bulk-pricing-rules";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BulkPricingRuleCollectionResponse',
                '/catalog/products/{product_id}/bulk-pricing-rules'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BulkPricingRuleCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BulkPricingRuleCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCategories
     *
     * 
     *
     * @param string $name Filter items by name. (optional)
     * @param int $parent_id Filter items by parent_id. (optional)
     * @param string $page_title Filter items by page_title. (optional)
     * @param string $keyword Filter items by keywords. (optional)
     * @param int $is_visible Filter items by is_visible. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\CategoryCollectionResponse
     */
    public function getCategories($name = null, $parent_id = null, $page_title = null, $keyword = null, $is_visible = null, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getCategoriesWithHttpInfo($name, $parent_id, $page_title, $keyword, $is_visible, $page, $limit, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getCategoriesWithHttpInfo
     *
     * 
     *
     * @param string $name Filter items by name. (optional)
     * @param int $parent_id Filter items by parent_id. (optional)
     * @param string $page_title Filter items by page_title. (optional)
     * @param string $keyword Filter items by keywords. (optional)
     * @param int $is_visible Filter items by is_visible. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\CategoryCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoriesWithHttpInfo($name = null, $parent_id = null, $page_title = null, $keyword = null, $is_visible = null, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        // parse inputs
        $resourcePath = "/catalog/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($parent_id !== null) {
            $queryParams['parent_id'] = $this->apiClient->getSerializer()->toQueryValue($parent_id);
        }
        // query params
        if ($page_title !== null) {
            $queryParams['page_title'] = $this->apiClient->getSerializer()->toQueryValue($page_title);
        }
        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }
        // query params
        if ($is_visible !== null) {
            $queryParams['is_visible'] = $this->apiClient->getSerializer()->toQueryValue($is_visible);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CategoryCollectionResponse',
                '/catalog/categories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CategoryCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CategoryCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCategoryById
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\CategoryResponse
     */
    public function getCategoryById($category_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getCategoryByIdWithHttpInfo($category_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getCategoryByIdWithHttpInfo
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\CategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoryByIdWithHttpInfo($category_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling getCategoryById');
        }
        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CategoryResponse',
                '/catalog/categories/{category_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CategoryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CategoryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCategoryMetafieldByCategoryId
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetafieldResponse
     */
    public function getCategoryMetafieldByCategoryId($metafield_id, $category_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getCategoryMetafieldByCategoryIdWithHttpInfo($metafield_id, $category_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getCategoryMetafieldByCategoryIdWithHttpInfo
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetafieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoryMetafieldByCategoryIdWithHttpInfo($metafield_id, $category_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'metafield_id' is set
        if ($metafield_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling getCategoryMetafieldByCategoryId');
        }
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling getCategoryMetafieldByCategoryId');
        }
        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($metafield_id !== null) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }
        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse',
                '/catalog/categories/{category_id}/metafields/{metafield_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCategoryMetafieldsByCategoryId
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $key Filter based on a metafield&#39;s key. (optional)
     * @param string $namespace Filter based on a metafield&#39;s key. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetaFieldCollectionResponse
     */
    public function getCategoryMetafieldsByCategoryId($category_id, $page = null, $limit = null, $key = null, $namespace = null, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getCategoryMetafieldsByCategoryIdWithHttpInfo($category_id, $page, $limit, $key, $namespace, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getCategoryMetafieldsByCategoryIdWithHttpInfo
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $key Filter based on a metafield&#39;s key. (optional)
     * @param string $namespace Filter based on a metafield&#39;s key. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetaFieldCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoryMetafieldsByCategoryIdWithHttpInfo($category_id, $page = null, $limit = null, $key = null, $namespace = null, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling getCategoryMetafieldsByCategoryId');
        }
        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = $this->apiClient->getSerializer()->toQueryValue($key);
        }
        // query params
        if ($namespace !== null) {
            $queryParams['namespace'] = $this->apiClient->getSerializer()->toQueryValue($namespace);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse',
                '/catalog/categories/{category_id}/metafields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCategoryTree
     *
     * 
     *
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\CategoryTreeCollectionResponse
     */
    public function getCategoryTree()
    {
        list($response) = $this->getCategoryTreeWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCategoryTreeWithHttpInfo
     *
     * 
     *
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\CategoryTreeCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoryTreeWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/catalog/categories/tree";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CategoryTreeCollectionResponse',
                '/catalog/categories/tree'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CategoryTreeCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CategoryTreeCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getComplexRuleById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $complex_rule_id The ID of the &#x60;ComplexRule&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ComplexRuleResponse
     */
    public function getComplexRuleById($product_id, $complex_rule_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getComplexRuleByIdWithHttpInfo($product_id, $complex_rule_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getComplexRuleByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $complex_rule_id The ID of the &#x60;ComplexRule&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ComplexRuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getComplexRuleByIdWithHttpInfo($product_id, $complex_rule_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getComplexRuleById');
        }
        // verify the required parameter 'complex_rule_id' is set
        if ($complex_rule_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $complex_rule_id when calling getComplexRuleById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/complex-rules/{complex_rule_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($complex_rule_id !== null) {
            $resourcePath = str_replace(
                "{" . "complex_rule_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($complex_rule_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ComplexRuleResponse',
                '/catalog/products/{product_id}/complex-rules/{complex_rule_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ComplexRuleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ComplexRuleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getComplexRules
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ComplexRuleCollectionResponse
     */
    public function getComplexRules($product_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getComplexRulesWithHttpInfo($product_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getComplexRulesWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ComplexRuleCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getComplexRulesWithHttpInfo($product_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getComplexRules');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/complex-rules";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ComplexRuleCollectionResponse',
                '/catalog/products/{product_id}/complex-rules'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ComplexRuleCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ComplexRuleCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getConfigurableFieldById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $configurable_field_id The ID of the &#x60;ConfigurableField&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ConfigurableFieldResponse
     */
    public function getConfigurableFieldById($product_id, $configurable_field_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getConfigurableFieldByIdWithHttpInfo($product_id, $configurable_field_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getConfigurableFieldByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $configurable_field_id The ID of the &#x60;ConfigurableField&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ConfigurableFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConfigurableFieldByIdWithHttpInfo($product_id, $configurable_field_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getConfigurableFieldById');
        }
        // verify the required parameter 'configurable_field_id' is set
        if ($configurable_field_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $configurable_field_id when calling getConfigurableFieldById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/configurable-fields/{configurable_field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($configurable_field_id !== null) {
            $resourcePath = str_replace(
                "{" . "configurable_field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($configurable_field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse',
                '/catalog/products/{product_id}/configurable-fields/{configurable_field_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getConfigurableFields
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ConfigurableFieldCollectionResponse
     */
    public function getConfigurableFields($product_id, $include_fields = null, $exclude_fields = null, $page = null, $limit = null)
    {
        list($response) = $this->getConfigurableFieldsWithHttpInfo($product_id, $include_fields, $exclude_fields, $page, $limit);
        return $response;
    }

    /**
     * Operation getConfigurableFieldsWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ConfigurableFieldCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConfigurableFieldsWithHttpInfo($product_id, $include_fields = null, $exclude_fields = null, $page = null, $limit = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getConfigurableFields');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/configurable-fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ConfigurableFieldCollectionResponse',
                '/catalog/products/{product_id}/configurable-fields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ConfigurableFieldCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ConfigurableFieldCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomFieldById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $custom_field_id The ID of the &#x60;CustomField&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\CustomFieldResponse
     */
    public function getCustomFieldById($product_id, $custom_field_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getCustomFieldByIdWithHttpInfo($product_id, $custom_field_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getCustomFieldByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $custom_field_id The ID of the &#x60;CustomField&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\CustomFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomFieldByIdWithHttpInfo($product_id, $custom_field_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getCustomFieldById');
        }
        // verify the required parameter 'custom_field_id' is set
        if ($custom_field_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_field_id when calling getCustomFieldById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/custom-fields/{custom_field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($custom_field_id !== null) {
            $resourcePath = str_replace(
                "{" . "custom_field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($custom_field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CustomFieldResponse',
                '/catalog/products/{product_id}/custom-fields/{custom_field_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CustomFieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CustomFieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomFields
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\CustomFieldCollectionResponse
     */
    public function getCustomFields($product_id, $include_fields = null, $exclude_fields = null, $page = null, $limit = null)
    {
        list($response) = $this->getCustomFieldsWithHttpInfo($product_id, $include_fields, $exclude_fields, $page, $limit);
        return $response;
    }

    /**
     * Operation getCustomFieldsWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\CustomFieldCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomFieldsWithHttpInfo($product_id, $include_fields = null, $exclude_fields = null, $page = null, $limit = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getCustomFields');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/custom-fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CustomFieldCollectionResponse',
                '/catalog/products/{product_id}/custom-fields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CustomFieldCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CustomFieldCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getModifierById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ModifierResponse
     */
    public function getModifierById($product_id, $modifier_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getModifierByIdWithHttpInfo($product_id, $modifier_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getModifierByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ModifierResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModifierByIdWithHttpInfo($product_id, $modifier_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getModifierById');
        }
        // verify the required parameter 'modifier_id' is set
        if ($modifier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling getModifierById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierResponse',
                '/catalog/products/{product_id}/modifiers/{modifier_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getModifierValueById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier/Option Value&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ModifierValueResponse
     */
    public function getModifierValueById($product_id, $modifier_id, $value_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getModifierValueByIdWithHttpInfo($product_id, $modifier_id, $value_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getModifierValueByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier/Option Value&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ModifierValueResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModifierValueByIdWithHttpInfo($product_id, $modifier_id, $value_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getModifierValueById');
        }
        // verify the required parameter 'modifier_id' is set
        if ($modifier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling getModifierValueById');
        }
        // verify the required parameter 'value_id' is set
        if ($value_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling getModifierValueById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // path params
        if ($value_id !== null) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierValueResponse',
                '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierValueResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierValueResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getModifierValues
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ModifierValueCollectionResponse
     */
    public function getModifierValues($product_id, $modifier_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getModifierValuesWithHttpInfo($product_id, $modifier_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getModifierValuesWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ModifierValueCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModifierValuesWithHttpInfo($product_id, $modifier_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getModifierValues');
        }
        // verify the required parameter 'modifier_id' is set
        if ($modifier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling getModifierValues');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierValueCollectionResponse',
                '/catalog/products/{product_id}/modifiers/{modifier_id}/values'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierValueCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierValueCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getModifiers
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ModifierCollectionResponse
     */
    public function getModifiers($product_id, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getModifiersWithHttpInfo($product_id, $page, $limit, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getModifiersWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ModifierCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModifiersWithHttpInfo($product_id, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getModifiers');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierCollectionResponse',
                '/catalog/products/{product_id}/modifiers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOptionById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\OptionResponse
     */
    public function getOptionById($product_id, $option_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getOptionByIdWithHttpInfo($product_id, $option_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getOptionByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\OptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOptionByIdWithHttpInfo($product_id, $option_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getOptionById');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling getOptionById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionResponse',
                '/catalog/products/{product_id}/options/{option_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOptionValueById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier/Option Value&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\OptionValueResponse
     */
    public function getOptionValueById($product_id, $option_id, $value_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getOptionValueByIdWithHttpInfo($product_id, $option_id, $value_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getOptionValueByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier/Option Value&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\OptionValueResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOptionValueByIdWithHttpInfo($product_id, $option_id, $value_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getOptionValueById');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling getOptionValueById');
        }
        // verify the required parameter 'value_id' is set
        if ($value_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling getOptionValueById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}/values/{value_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // path params
        if ($value_id !== null) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionValueResponse',
                '/catalog/products/{product_id}/options/{option_id}/values/{value_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionValueResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionValueResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOptionValues
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\OptionValueCollectionResponse
     */
    public function getOptionValues($product_id, $option_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getOptionValuesWithHttpInfo($product_id, $option_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getOptionValuesWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\OptionValueCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOptionValuesWithHttpInfo($product_id, $option_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getOptionValues');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling getOptionValues');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}/values";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionValueCollectionResponse',
                '/catalog/products/{product_id}/options/{option_id}/values'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionValueCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionValueCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOptions
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\OptionCollectionResponse
     */
    public function getOptions($product_id, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getOptionsWithHttpInfo($product_id, $page, $limit, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getOptionsWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\OptionCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOptionsWithHttpInfo($product_id, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getOptions');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionCollectionResponse',
                '/catalog/products/{product_id}/options'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include Sub-resources to include on a product, in a comma-separated list. Valid expansions currently include &#x60;variants&#x60;, &#x60;images&#x60;, &#39;primary_image&#x60;, &#x60;custom_fields&#x60;, and &#x60;bulk_pricing_rules&#x60;. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @param int $price_list_id The ID of the &#x60;Price List&#x60;. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductResponse
     */
    public function getProductById($product_id, $include = null, $include_fields = null, $exclude_fields = null, $price_list_id = null)
    {
        list($response) = $this->getProductByIdWithHttpInfo($product_id, $include, $include_fields, $exclude_fields, $price_list_id);
        return $response;
    }

    /**
     * Operation getProductByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include Sub-resources to include on a product, in a comma-separated list. Valid expansions currently include &#x60;variants&#x60;, &#x60;images&#x60;, &#39;primary_image&#x60;, &#x60;custom_fields&#x60;, and &#x60;bulk_pricing_rules&#x60;. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @param int $price_list_id The ID of the &#x60;Price List&#x60;. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductByIdWithHttpInfo($product_id, $include = null, $include_fields = null, $exclude_fields = null, $price_list_id = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // query params
        if ($price_list_id !== null) {
            $queryParams['price_list_id'] = $this->apiClient->getSerializer()->toQueryValue($price_list_id);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductResponse',
                '/catalog/products/{product_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductImageById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $image_id The ID of the &#x60;Image&#x60; that is being operated on. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductImageResponse
     */
    public function getProductImageById($product_id, $image_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getProductImageByIdWithHttpInfo($product_id, $image_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getProductImageByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $image_id The ID of the &#x60;Image&#x60; that is being operated on. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductImageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductImageByIdWithHttpInfo($product_id, $image_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductImageById');
        }
        // verify the required parameter 'image_id' is set
        if ($image_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $image_id when calling getProductImageById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/images/{image_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($image_id !== null) {
            $resourcePath = str_replace(
                "{" . "image_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($image_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductImageResponse',
                '/catalog/products/{product_id}/images/{image_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductImageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductImageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductImages
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductImageCollectionResponse
     */
    public function getProductImages($product_id, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getProductImagesWithHttpInfo($product_id, $page, $limit, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getProductImagesWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductImageCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductImagesWithHttpInfo($product_id, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductImages');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/images";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductImageCollectionResponse',
                '/catalog/products/{product_id}/images'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductImageCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductImageCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductMetafieldByProductId
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetafieldResponse
     */
    public function getProductMetafieldByProductId($metafield_id, $product_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getProductMetafieldByProductIdWithHttpInfo($metafield_id, $product_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getProductMetafieldByProductIdWithHttpInfo
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetafieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductMetafieldByProductIdWithHttpInfo($metafield_id, $product_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'metafield_id' is set
        if ($metafield_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling getProductMetafieldByProductId');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductMetafieldByProductId');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($metafield_id !== null) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse',
                '/catalog/products/{product_id}/metafields/{metafield_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductMetafieldsByProductId
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $key Filter based on a metafield&#39;s key. (optional)
     * @param string $namespace Filter based on a metafield&#39;s key. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetaFieldCollectionResponse
     */
    public function getProductMetafieldsByProductId($product_id, $page = null, $limit = null, $key = null, $namespace = null, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getProductMetafieldsByProductIdWithHttpInfo($product_id, $page, $limit, $key, $namespace, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getProductMetafieldsByProductIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $key Filter based on a metafield&#39;s key. (optional)
     * @param string $namespace Filter based on a metafield&#39;s key. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetaFieldCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductMetafieldsByProductIdWithHttpInfo($product_id, $page = null, $limit = null, $key = null, $namespace = null, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductMetafieldsByProductId');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = $this->apiClient->getSerializer()->toQueryValue($key);
        }
        // query params
        if ($namespace !== null) {
            $queryParams['namespace'] = $this->apiClient->getSerializer()->toQueryValue($namespace);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse',
                '/catalog/products/{product_id}/metafields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductReviewById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $review_id The ID of the &#x60;review&#x60; that is being operated on. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductReviewResponse
     */
    public function getProductReviewById($product_id, $review_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getProductReviewByIdWithHttpInfo($product_id, $review_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getProductReviewByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $review_id The ID of the &#x60;review&#x60; that is being operated on. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductReviewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductReviewByIdWithHttpInfo($product_id, $review_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductReviewById');
        }
        // verify the required parameter 'review_id' is set
        if ($review_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $review_id when calling getProductReviewById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/reviews/{review_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($review_id !== null) {
            $resourcePath = str_replace(
                "{" . "review_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($review_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductReviewResponse',
                '/catalog/products/{product_id}/reviews/{review_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductReviewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductReviewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductReviews
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductReviewCollectionResponse
     */
    public function getProductReviews($product_id, $include_fields = null, $exclude_fields = null, $page = null, $limit = null)
    {
        list($response) = $this->getProductReviewsWithHttpInfo($product_id, $include_fields, $exclude_fields, $page, $limit);
        return $response;
    }

    /**
     * Operation getProductReviewsWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductReviewCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductReviewsWithHttpInfo($product_id, $include_fields = null, $exclude_fields = null, $page = null, $limit = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductReviews');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/reviews";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductReviewCollectionResponse',
                '/catalog/products/{product_id}/reviews'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductReviewCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductReviewCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductVideoById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $video_id The ID of the &#x60;Video&#x60; that is being operated on. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductVideoResponse
     */
    public function getProductVideoById($product_id, $video_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getProductVideoByIdWithHttpInfo($product_id, $video_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getProductVideoByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $video_id The ID of the &#x60;Video&#x60; that is being operated on. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductVideoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductVideoByIdWithHttpInfo($product_id, $video_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductVideoById');
        }
        // verify the required parameter 'video_id' is set
        if ($video_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $video_id when calling getProductVideoById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/videos/{video_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($video_id !== null) {
            $resourcePath = str_replace(
                "{" . "video_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($video_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductVideoResponse',
                '/catalog/products/{product_id}/videos/{video_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductVideoResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductVideoResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductVideos
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductVideoCollectionResponse
     */
    public function getProductVideos($product_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getProductVideosWithHttpInfo($product_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getProductVideosWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductVideoCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductVideosWithHttpInfo($product_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getProductVideos');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/videos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductVideoCollectionResponse',
                '/catalog/products/{product_id}/videos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductVideoCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductVideoCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProducts
     *
     * 
     *
     * @param int $id Filter items by id. (optional)
     * @param string $name Filter items by name. (optional)
     * @param string $sku Filter items by sku. (optional)
     * @param string $upc Filter items by upc. (optional)
     * @param float $price Filter items by price. (optional)
     * @param float $weight Filter items by weight. (optional)
     * @param int $condition Filter items by condition. (optional)
     * @param int $brand_id Filter items by brand_id. (optional)
     * @param \DateTime $date_modified Filter items by date_modified. (optional)
     * @param \DateTime $date_last_imported Filter items by date_last_imported. (optional)
     * @param int $is_visible Filter items by is_visible. (optional)
     * @param int $is_featured Filter items by is_featured. (optional)
     * @param int $is_free_shipping Filter items by is_free_shipping. (optional)
     * @param int $inventory_level Filter items by inventory_level. (optional)
     * @param int $inventory_low Filter items by inventory_low. Values: 1, 0. (optional)
     * @param int $out_of_stock Filter items by out_of_stock. To enable the filter, pass &#x60;out_of_stock&#x60;&#x3D;&#x60;1&#x60;. (optional)
     * @param int $total_sold Filter items by total_sold. (optional)
     * @param string $type Filter items by type: &#x60;physical&#x60; or &#x60;digital&#x60;. (optional)
     * @param int $categories Filter items by categories. (optional)
     * @param string $keyword Filter items by keywords found in the &#x60;name&#x60;, &#x60;description&#x60;, or &#x60;sku&#x60; fields, or in the brand name. (optional)
     * @param string $keyword_context Set context for a product search. (optional)
     * @param int $status Filter items by status. (optional)
     * @param string $include Sub-resources to include on a product, in a comma-separated list. Valid expansions currently include &#x60;variants&#x60;, &#x60;images&#x60;, &#39;primary_image&#x60;, &#x60;custom_fields&#x60;, and &#x60;bulk_pricing_rules&#x60;. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @param string $availability Filter items by availability. Values are: available, disabled, preorder. (optional)
     * @param int $price_list_id The ID of the &#x60;Price List&#x60;. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $direction Sort direction. Acceptable values are: &#x60;asc&#x60;, &#x60;desc&#x60;. (optional)
     * @param string $sort Field name to sort by. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductCollectionResponse
     */
    public function getProducts($id = null, $name = null, $sku = null, $upc = null, $price = null, $weight = null, $condition = null, $brand_id = null, $date_modified = null, $date_last_imported = null, $is_visible = null, $is_featured = null, $is_free_shipping = null, $inventory_level = null, $inventory_low = null, $out_of_stock = null, $total_sold = null, $type = null, $categories = null, $keyword = null, $keyword_context = null, $status = null, $include = null, $include_fields = null, $exclude_fields = null, $availability = null, $price_list_id = null, $page = null, $limit = null, $direction = null, $sort = null)
    {
        list($response) = $this->getProductsWithHttpInfo($id, $name, $sku, $upc, $price, $weight, $condition, $brand_id, $date_modified, $date_last_imported, $is_visible, $is_featured, $is_free_shipping, $inventory_level, $inventory_low, $out_of_stock, $total_sold, $type, $categories, $keyword, $keyword_context, $status, $include, $include_fields, $exclude_fields, $availability, $price_list_id, $page, $limit, $direction, $sort);
        return $response;
    }

    /**
     * Operation getProductsWithHttpInfo
     *
     * 
     *
     * @param int $id Filter items by id. (optional)
     * @param string $name Filter items by name. (optional)
     * @param string $sku Filter items by sku. (optional)
     * @param string $upc Filter items by upc. (optional)
     * @param float $price Filter items by price. (optional)
     * @param float $weight Filter items by weight. (optional)
     * @param int $condition Filter items by condition. (optional)
     * @param int $brand_id Filter items by brand_id. (optional)
     * @param \DateTime $date_modified Filter items by date_modified. (optional)
     * @param \DateTime $date_last_imported Filter items by date_last_imported. (optional)
     * @param int $is_visible Filter items by is_visible. (optional)
     * @param int $is_featured Filter items by is_featured. (optional)
     * @param int $is_free_shipping Filter items by is_free_shipping. (optional)
     * @param int $inventory_level Filter items by inventory_level. (optional)
     * @param int $inventory_low Filter items by inventory_low. Values: 1, 0. (optional)
     * @param int $out_of_stock Filter items by out_of_stock. To enable the filter, pass &#x60;out_of_stock&#x60;&#x3D;&#x60;1&#x60;. (optional)
     * @param int $total_sold Filter items by total_sold. (optional)
     * @param string $type Filter items by type: &#x60;physical&#x60; or &#x60;digital&#x60;. (optional)
     * @param int $categories Filter items by categories. (optional)
     * @param string $keyword Filter items by keywords found in the &#x60;name&#x60;, &#x60;description&#x60;, or &#x60;sku&#x60; fields, or in the brand name. (optional)
     * @param string $keyword_context Set context for a product search. (optional)
     * @param int $status Filter items by status. (optional)
     * @param string $include Sub-resources to include on a product, in a comma-separated list. Valid expansions currently include &#x60;variants&#x60;, &#x60;images&#x60;, &#39;primary_image&#x60;, &#x60;custom_fields&#x60;, and &#x60;bulk_pricing_rules&#x60;. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @param string $availability Filter items by availability. Values are: available, disabled, preorder. (optional)
     * @param int $price_list_id The ID of the &#x60;Price List&#x60;. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $direction Sort direction. Acceptable values are: &#x60;asc&#x60;, &#x60;desc&#x60;. (optional)
     * @param string $sort Field name to sort by. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductsWithHttpInfo($id = null, $name = null, $sku = null, $upc = null, $price = null, $weight = null, $condition = null, $brand_id = null, $date_modified = null, $date_last_imported = null, $is_visible = null, $is_featured = null, $is_free_shipping = null, $inventory_level = null, $inventory_low = null, $out_of_stock = null, $total_sold = null, $type = null, $categories = null, $keyword = null, $keyword_context = null, $status = null, $include = null, $include_fields = null, $exclude_fields = null, $availability = null, $price_list_id = null, $page = null, $limit = null, $direction = null, $sort = null)
    {
        // parse inputs
        $resourcePath = "/catalog/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($sku !== null) {
            $queryParams['sku'] = $this->apiClient->getSerializer()->toQueryValue($sku);
        }
        // query params
        if ($upc !== null) {
            $queryParams['upc'] = $this->apiClient->getSerializer()->toQueryValue($upc);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = $this->apiClient->getSerializer()->toQueryValue($price);
        }
        // query params
        if ($weight !== null) {
            $queryParams['weight'] = $this->apiClient->getSerializer()->toQueryValue($weight);
        }
        // query params
        if ($condition !== null) {
            $queryParams['condition'] = $this->apiClient->getSerializer()->toQueryValue($condition);
        }
        // query params
        if ($brand_id !== null) {
            $queryParams['brand_id'] = $this->apiClient->getSerializer()->toQueryValue($brand_id);
        }
        // query params
        if ($date_modified !== null) {
            $queryParams['date_modified'] = $this->apiClient->getSerializer()->toQueryValue($date_modified);
        }
        // query params
        if ($date_last_imported !== null) {
            $queryParams['date_last_imported'] = $this->apiClient->getSerializer()->toQueryValue($date_last_imported);
        }
        // query params
        if ($is_visible !== null) {
            $queryParams['is_visible'] = $this->apiClient->getSerializer()->toQueryValue($is_visible);
        }
        // query params
        if ($is_featured !== null) {
            $queryParams['is_featured'] = $this->apiClient->getSerializer()->toQueryValue($is_featured);
        }
        // query params
        if ($is_free_shipping !== null) {
            $queryParams['is_free_shipping'] = $this->apiClient->getSerializer()->toQueryValue($is_free_shipping);
        }
        // query params
        if ($inventory_level !== null) {
            $queryParams['inventory_level'] = $this->apiClient->getSerializer()->toQueryValue($inventory_level);
        }
        // query params
        if ($inventory_low !== null) {
            $queryParams['inventory_low'] = $this->apiClient->getSerializer()->toQueryValue($inventory_low);
        }
        // query params
        if ($out_of_stock !== null) {
            $queryParams['out_of_stock'] = $this->apiClient->getSerializer()->toQueryValue($out_of_stock);
        }
        // query params
        if ($total_sold !== null) {
            $queryParams['total_sold'] = $this->apiClient->getSerializer()->toQueryValue($total_sold);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($categories !== null) {
            $queryParams['categories'] = $this->apiClient->getSerializer()->toQueryValue($categories);
        }
        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }
        // query params
        if ($keyword_context !== null) {
            $queryParams['keyword_context'] = $this->apiClient->getSerializer()->toQueryValue($keyword_context);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // query params
        if ($availability !== null) {
            $queryParams['availability'] = $this->apiClient->getSerializer()->toQueryValue($availability);
        }
        // query params
        if ($price_list_id !== null) {
            $queryParams['price_list_id'] = $this->apiClient->getSerializer()->toQueryValue($price_list_id);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = $this->apiClient->getSerializer()->toQueryValue($direction);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductCollectionResponse',
                '/catalog/products'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getVariantById
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\VariantResponse
     */
    public function getVariantById($product_id, $variant_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getVariantByIdWithHttpInfo($product_id, $variant_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getVariantByIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\VariantResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVariantByIdWithHttpInfo($product_id, $variant_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getVariantById');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling getVariantById');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\VariantResponse',
                '/catalog/products/{product_id}/variants/{variant_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\VariantResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\VariantResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getVariantMetafieldByProductIdAndVariantId
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetafieldResponse
     */
    public function getVariantMetafieldByProductIdAndVariantId($metafield_id, $product_id, $variant_id, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getVariantMetafieldByProductIdAndVariantIdWithHttpInfo($metafield_id, $product_id, $variant_id, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getVariantMetafieldByProductIdAndVariantIdWithHttpInfo
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetafieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVariantMetafieldByProductIdAndVariantIdWithHttpInfo($metafield_id, $product_id, $variant_id, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'metafield_id' is set
        if ($metafield_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling getVariantMetafieldByProductIdAndVariantId');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getVariantMetafieldByProductIdAndVariantId');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling getVariantMetafieldByProductIdAndVariantId');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($metafield_id !== null) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse',
                '/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getVariantMetafieldsByProductIdAndVariantId
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $key Filter based on a metafield&#39;s key. (optional)
     * @param string $namespace Filter based on a metafield&#39;s key. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetaFieldCollectionResponse
     */
    public function getVariantMetafieldsByProductIdAndVariantId($product_id, $variant_id, $page = null, $limit = null, $key = null, $namespace = null, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getVariantMetafieldsByProductIdAndVariantIdWithHttpInfo($product_id, $variant_id, $page, $limit, $key, $namespace, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getVariantMetafieldsByProductIdAndVariantIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $key Filter based on a metafield&#39;s key. (optional)
     * @param string $namespace Filter based on a metafield&#39;s key. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetaFieldCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVariantMetafieldsByProductIdAndVariantIdWithHttpInfo($product_id, $variant_id, $page = null, $limit = null, $key = null, $namespace = null, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getVariantMetafieldsByProductIdAndVariantId');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling getVariantMetafieldsByProductIdAndVariantId');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}/metafields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = $this->apiClient->getSerializer()->toQueryValue($key);
        }
        // query params
        if ($namespace !== null) {
            $queryParams['namespace'] = $this->apiClient->getSerializer()->toQueryValue($namespace);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse',
                '/catalog/products/{product_id}/variants/{variant_id}/metafields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetaFieldCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getVariants
     *
     * 
     *
     * @param int $id Filter items by id. (optional)
     * @param string $sku Filter items by sku. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\VariantCollectionResponse
     */
    public function getVariants($id = null, $sku = null, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getVariantsWithHttpInfo($id, $sku, $page, $limit, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getVariantsWithHttpInfo
     *
     * 
     *
     * @param int $id Filter items by id. (optional)
     * @param string $sku Filter items by sku. (optional)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\VariantCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVariantsWithHttpInfo($id = null, $sku = null, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        // parse inputs
        $resourcePath = "/catalog/variants";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($sku !== null) {
            $queryParams['sku'] = $this->apiClient->getSerializer()->toQueryValue($sku);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\VariantCollectionResponse',
                '/catalog/variants'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\VariantCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\VariantCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getVariantsByProductId
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\VariantCollectionResponse
     */
    public function getVariantsByProductId($product_id, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        list($response) = $this->getVariantsByProductIdWithHttpInfo($product_id, $page, $limit, $include_fields, $exclude_fields);
        return $response;
    }

    /**
     * Operation getVariantsByProductIdWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param string $include_fields Fields to include, in a comma-separated list. The ID and the specified fields will be returned. (optional)
     * @param string $exclude_fields Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. (optional)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\VariantCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVariantsByProductIdWithHttpInfo($product_id, $page = null, $limit = null, $include_fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getVariantsByProductId');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($include_fields !== null) {
            $queryParams['include_fields'] = $this->apiClient->getSerializer()->toQueryValue($include_fields);
        }
        // query params
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = $this->apiClient->getSerializer()->toQueryValue($exclude_fields);
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\VariantCollectionResponse',
                '/catalog/products/{product_id}/variants'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\VariantCollectionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\VariantCollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateBrand
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\BrandPut $brand Returns a &#x60;Brand&#x60; from the BigCommerce Catalog. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\BrandResponse
     */
    public function updateBrand($brand_id, $brand)
    {
        list($response) = $this->updateBrandWithHttpInfo($brand_id, $brand);
        return $response;
    }

    /**
     * Operation updateBrandWithHttpInfo
     *
     * 
     *
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\BrandPut $brand Returns a &#x60;Brand&#x60; from the BigCommerce Catalog. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\BrandResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBrandWithHttpInfo($brand_id, $brand)
    {
        // verify the required parameter 'brand_id' is set
        if ($brand_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling updateBrand');
        }
        // verify the required parameter 'brand' is set
        if ($brand === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand when calling updateBrand');
        }
        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($brand)) {
            $_tempBody = $brand;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BrandResponse',
                '/catalog/brands/{brand_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BrandResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BrandResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateBrandMetafield
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPut $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetafieldResponse
     */
    public function updateBrandMetafield($metafield_id, $brand_id, $metafield)
    {
        list($response) = $this->updateBrandMetafieldWithHttpInfo($metafield_id, $brand_id, $metafield);
        return $response;
    }

    /**
     * Operation updateBrandMetafieldWithHttpInfo
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $brand_id The ID of the &#x60;Brand&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPut $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetafieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBrandMetafieldWithHttpInfo($metafield_id, $brand_id, $metafield)
    {
        // verify the required parameter 'metafield_id' is set
        if ($metafield_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling updateBrandMetafield');
        }
        // verify the required parameter 'brand_id' is set
        if ($brand_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_id when calling updateBrandMetafield');
        }
        // verify the required parameter 'metafield' is set
        if ($metafield === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling updateBrandMetafield');
        }
        // parse inputs
        $resourcePath = "/catalog/brands/{brand_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($metafield_id !== null) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }
        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                "{" . "brand_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($brand_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
            $_tempBody = $metafield;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse',
                '/catalog/brands/{brand_id}/metafields/{metafield_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateBulkPricingRule
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $bulk_pricing_rule_id The ID of the &#x60;BulkPricingRule&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\BulkPricingRulePut $bulk_pricing_rule &#x60;BulkPricingRule&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\BulkPricingRuleResponse
     */
    public function updateBulkPricingRule($product_id, $bulk_pricing_rule_id, $bulk_pricing_rule)
    {
        list($response) = $this->updateBulkPricingRuleWithHttpInfo($product_id, $bulk_pricing_rule_id, $bulk_pricing_rule);
        return $response;
    }

    /**
     * Operation updateBulkPricingRuleWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $bulk_pricing_rule_id The ID of the &#x60;BulkPricingRule&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\BulkPricingRulePut $bulk_pricing_rule &#x60;BulkPricingRule&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\BulkPricingRuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBulkPricingRuleWithHttpInfo($product_id, $bulk_pricing_rule_id, $bulk_pricing_rule)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateBulkPricingRule');
        }
        // verify the required parameter 'bulk_pricing_rule_id' is set
        if ($bulk_pricing_rule_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bulk_pricing_rule_id when calling updateBulkPricingRule');
        }
        // verify the required parameter 'bulk_pricing_rule' is set
        if ($bulk_pricing_rule === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bulk_pricing_rule when calling updateBulkPricingRule');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($bulk_pricing_rule_id !== null) {
            $resourcePath = str_replace(
                "{" . "bulk_pricing_rule_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bulk_pricing_rule_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($bulk_pricing_rule)) {
            $_tempBody = $bulk_pricing_rule;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse',
                '/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\BulkPricingRuleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCategory
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\CategoryPut $category A BigCommerce &#x60;Category&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\CategoryResponse
     */
    public function updateCategory($category_id, $category)
    {
        list($response) = $this->updateCategoryWithHttpInfo($category_id, $category);
        return $response;
    }

    /**
     * Operation updateCategoryWithHttpInfo
     *
     * 
     *
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\CategoryPut $category A BigCommerce &#x60;Category&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\CategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCategoryWithHttpInfo($category_id, $category)
    {
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling updateCategory');
        }
        // verify the required parameter 'category' is set
        if ($category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category when calling updateCategory');
        }
        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($category)) {
            $_tempBody = $category;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CategoryResponse',
                '/catalog/categories/{category_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CategoryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CategoryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCategoryMetafield
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPut $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetafieldResponse
     */
    public function updateCategoryMetafield($metafield_id, $category_id, $metafield)
    {
        list($response) = $this->updateCategoryMetafieldWithHttpInfo($metafield_id, $category_id, $metafield);
        return $response;
    }

    /**
     * Operation updateCategoryMetafieldWithHttpInfo
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $category_id The ID of the &#x60;Category&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPut $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetafieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCategoryMetafieldWithHttpInfo($metafield_id, $category_id, $metafield)
    {
        // verify the required parameter 'metafield_id' is set
        if ($metafield_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling updateCategoryMetafield');
        }
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling updateCategoryMetafield');
        }
        // verify the required parameter 'metafield' is set
        if ($metafield === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling updateCategoryMetafield');
        }
        // parse inputs
        $resourcePath = "/catalog/categories/{category_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($metafield_id !== null) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }
        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
            $_tempBody = $metafield;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse',
                '/catalog/categories/{category_id}/metafields/{metafield_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateComplexRule
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $complex_rule_id The ID of the &#x60;ComplexRule&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\ComplexRulePut $complex_rule &#x60;ComplexRule&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ComplexRuleResponse
     */
    public function updateComplexRule($product_id, $complex_rule_id, $complex_rule)
    {
        list($response) = $this->updateComplexRuleWithHttpInfo($product_id, $complex_rule_id, $complex_rule);
        return $response;
    }

    /**
     * Operation updateComplexRuleWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $complex_rule_id The ID of the &#x60;ComplexRule&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\ComplexRulePut $complex_rule &#x60;ComplexRule&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ComplexRuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateComplexRuleWithHttpInfo($product_id, $complex_rule_id, $complex_rule)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateComplexRule');
        }
        // verify the required parameter 'complex_rule_id' is set
        if ($complex_rule_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $complex_rule_id when calling updateComplexRule');
        }
        // verify the required parameter 'complex_rule' is set
        if ($complex_rule === null) {
            throw new \InvalidArgumentException('Missing the required parameter $complex_rule when calling updateComplexRule');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/complex-rules/{complex_rule_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($complex_rule_id !== null) {
            $resourcePath = str_replace(
                "{" . "complex_rule_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($complex_rule_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($complex_rule)) {
            $_tempBody = $complex_rule;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ComplexRuleResponse',
                '/catalog/products/{product_id}/complex-rules/{complex_rule_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ComplexRuleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ComplexRuleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateConfigurableField
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $configurable_field_id The ID of the &#x60;ConfigurableField&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\ConfigurableFieldPut $configurable_field &#x60;ConfigurableField&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ConfigurableFieldResponse
     */
    public function updateConfigurableField($product_id, $configurable_field_id, $configurable_field)
    {
        list($response) = $this->updateConfigurableFieldWithHttpInfo($product_id, $configurable_field_id, $configurable_field);
        return $response;
    }

    /**
     * Operation updateConfigurableFieldWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $configurable_field_id The ID of the &#x60;ConfigurableField&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\ConfigurableFieldPut $configurable_field &#x60;ConfigurableField&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ConfigurableFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateConfigurableFieldWithHttpInfo($product_id, $configurable_field_id, $configurable_field)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateConfigurableField');
        }
        // verify the required parameter 'configurable_field_id' is set
        if ($configurable_field_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $configurable_field_id when calling updateConfigurableField');
        }
        // verify the required parameter 'configurable_field' is set
        if ($configurable_field === null) {
            throw new \InvalidArgumentException('Missing the required parameter $configurable_field when calling updateConfigurableField');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/configurable-fields/{configurable_field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($configurable_field_id !== null) {
            $resourcePath = str_replace(
                "{" . "configurable_field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($configurable_field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($configurable_field)) {
            $_tempBody = $configurable_field;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse',
                '/catalog/products/{product_id}/configurable-fields/{configurable_field_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ConfigurableFieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCustomField
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $custom_field_id The ID of the &#x60;CustomField&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\CustomFieldPut $custom_field &#x60;CustomField&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\CustomFieldResponse
     */
    public function updateCustomField($product_id, $custom_field_id, $custom_field)
    {
        list($response) = $this->updateCustomFieldWithHttpInfo($product_id, $custom_field_id, $custom_field);
        return $response;
    }

    /**
     * Operation updateCustomFieldWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $custom_field_id The ID of the &#x60;CustomField&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\CustomFieldPut $custom_field &#x60;CustomField&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\CustomFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomFieldWithHttpInfo($product_id, $custom_field_id, $custom_field)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateCustomField');
        }
        // verify the required parameter 'custom_field_id' is set
        if ($custom_field_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_field_id when calling updateCustomField');
        }
        // verify the required parameter 'custom_field' is set
        if ($custom_field === null) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_field when calling updateCustomField');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/custom-fields/{custom_field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($custom_field_id !== null) {
            $resourcePath = str_replace(
                "{" . "custom_field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($custom_field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($custom_field)) {
            $_tempBody = $custom_field;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\CustomFieldResponse',
                '/catalog/products/{product_id}/custom-fields/{custom_field_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CustomFieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CustomFieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateModifier
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\ModifierPut $modifier A BigCommerce &#x60;Modifier&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ModifierResponse
     */
    public function updateModifier($product_id, $modifier_id, $modifier)
    {
        list($response) = $this->updateModifierWithHttpInfo($product_id, $modifier_id, $modifier);
        return $response;
    }

    /**
     * Operation updateModifierWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\ModifierPut $modifier A BigCommerce &#x60;Modifier&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ModifierResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateModifierWithHttpInfo($product_id, $modifier_id, $modifier)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateModifier');
        }
        // verify the required parameter 'modifier_id' is set
        if ($modifier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling updateModifier');
        }
        // verify the required parameter 'modifier' is set
        if ($modifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier when calling updateModifier');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($modifier)) {
            $_tempBody = $modifier;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierResponse',
                '/catalog/products/{product_id}/modifiers/{modifier_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateModifierValue
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier/Option Value&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\ModifierValuePut $modifier_value A BigCommerce &#x60;ModifierValue&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ModifierValueResponse
     */
    public function updateModifierValue($product_id, $modifier_id, $value_id, $modifier_value)
    {
        list($response) = $this->updateModifierValueWithHttpInfo($product_id, $modifier_id, $value_id, $modifier_value);
        return $response;
    }

    /**
     * Operation updateModifierValueWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $modifier_id The ID of the &#x60;Modifier&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier/Option Value&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\ModifierValuePut $modifier_value A BigCommerce &#x60;ModifierValue&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ModifierValueResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateModifierValueWithHttpInfo($product_id, $modifier_id, $value_id, $modifier_value)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateModifierValue');
        }
        // verify the required parameter 'modifier_id' is set
        if ($modifier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_id when calling updateModifierValue');
        }
        // verify the required parameter 'value_id' is set
        if ($value_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling updateModifierValue');
        }
        // verify the required parameter 'modifier_value' is set
        if ($modifier_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_value when calling updateModifierValue');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_id),
                $resourcePath
            );
        }
        // path params
        if ($value_id !== null) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($modifier_value)) {
            $_tempBody = $modifier_value;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ModifierValueResponse',
                '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ModifierValueResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ModifierValueResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateOption
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\OptionPut $option A BigCommerce &#x60;Option&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\OptionResponse
     */
    public function updateOption($product_id, $option_id, $option)
    {
        list($response) = $this->updateOptionWithHttpInfo($product_id, $option_id, $option);
        return $response;
    }

    /**
     * Operation updateOptionWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\OptionPut $option A BigCommerce &#x60;Option&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\OptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOptionWithHttpInfo($product_id, $option_id, $option)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateOption');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling updateOption');
        }
        // verify the required parameter 'option' is set
        if ($option === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option when calling updateOption');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($option)) {
            $_tempBody = $option;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionResponse',
                '/catalog/products/{product_id}/options/{option_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateOptionValue
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier/Option Value&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\OptionValuePut $option_value A BigCommerce &#x60;OptionValue&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\OptionValueResponse
     */
    public function updateOptionValue($product_id, $option_id, $value_id, $option_value)
    {
        list($response) = $this->updateOptionValueWithHttpInfo($product_id, $option_id, $value_id, $option_value);
        return $response;
    }

    /**
     * Operation updateOptionValueWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $option_id The ID of the &#x60;Option&#x60;. (required)
     * @param int $value_id The ID of the &#x60;Modifier/Option Value&#x60;. (required)
     * @param \BigCommerce\Api\v3\Model\OptionValuePut $option_value A BigCommerce &#x60;OptionValue&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\OptionValueResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOptionValueWithHttpInfo($product_id, $option_id, $value_id, $option_value)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateOptionValue');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling updateOptionValue');
        }
        // verify the required parameter 'value_id' is set
        if ($value_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value_id when calling updateOptionValue');
        }
        // verify the required parameter 'option_value' is set
        if ($option_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_value when calling updateOptionValue');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/options/{option_id}/values/{value_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // path params
        if ($value_id !== null) {
            $resourcePath = str_replace(
                "{" . "value_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($value_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($option_value)) {
            $_tempBody = $option_value;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\OptionValueResponse',
                '/catalog/products/{product_id}/options/{option_id}/values/{value_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\OptionValueResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\OptionValueResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProduct
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ProductPut $product A BigCommerce &#x60;Product&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductResponse
     */
    public function updateProduct($product_id, $product)
    {
        list($response) = $this->updateProductWithHttpInfo($product_id, $product);
        return $response;
    }

    /**
     * Operation updateProductWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\ProductPut $product A BigCommerce &#x60;Product&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductWithHttpInfo($product_id, $product)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateProduct');
        }
        // verify the required parameter 'product' is set
        if ($product === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product when calling updateProduct');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product)) {
            $_tempBody = $product;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductResponse',
                '/catalog/products/{product_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProductImage
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $image_id The ID of the &#x60;Image&#x60; that is being operated on. (required)
     * @param \BigCommerce\Api\v3\Model\ProductImagePut $product_image A BigCommerce &#x60;ProductImage&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductImageResponse
     */
    public function updateProductImage($product_id, $image_id, $product_image)
    {
        list($response) = $this->updateProductImageWithHttpInfo($product_id, $image_id, $product_image);
        return $response;
    }

    /**
     * Operation updateProductImageWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $image_id The ID of the &#x60;Image&#x60; that is being operated on. (required)
     * @param \BigCommerce\Api\v3\Model\ProductImagePut $product_image A BigCommerce &#x60;ProductImage&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductImageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductImageWithHttpInfo($product_id, $image_id, $product_image)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateProductImage');
        }
        // verify the required parameter 'image_id' is set
        if ($image_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $image_id when calling updateProductImage');
        }
        // verify the required parameter 'product_image' is set
        if ($product_image === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_image when calling updateProductImage');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/images/{image_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($image_id !== null) {
            $resourcePath = str_replace(
                "{" . "image_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($image_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product_image)) {
            $_tempBody = $product_image;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductImageResponse',
                '/catalog/products/{product_id}/images/{image_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductImageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductImageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProductMetafield
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPut $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetafieldResponse
     */
    public function updateProductMetafield($metafield_id, $product_id, $metafield)
    {
        list($response) = $this->updateProductMetafieldWithHttpInfo($metafield_id, $product_id, $metafield);
        return $response;
    }

    /**
     * Operation updateProductMetafieldWithHttpInfo
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPut $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetafieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductMetafieldWithHttpInfo($metafield_id, $product_id, $metafield)
    {
        // verify the required parameter 'metafield_id' is set
        if ($metafield_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling updateProductMetafield');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateProductMetafield');
        }
        // verify the required parameter 'metafield' is set
        if ($metafield === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling updateProductMetafield');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($metafield_id !== null) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
            $_tempBody = $metafield;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse',
                '/catalog/products/{product_id}/metafields/{metafield_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProductReview
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $review_id The ID of the &#x60;review&#x60; that is being operated on. (required)
     * @param \BigCommerce\Api\v3\Model\ProductReviewPut $product_review A BigCommerce &#x60;ProductReview&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductReviewResponse
     */
    public function updateProductReview($product_id, $review_id, $product_review)
    {
        list($response) = $this->updateProductReviewWithHttpInfo($product_id, $review_id, $product_review);
        return $response;
    }

    /**
     * Operation updateProductReviewWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $review_id The ID of the &#x60;review&#x60; that is being operated on. (required)
     * @param \BigCommerce\Api\v3\Model\ProductReviewPut $product_review A BigCommerce &#x60;ProductReview&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductReviewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductReviewWithHttpInfo($product_id, $review_id, $product_review)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateProductReview');
        }
        // verify the required parameter 'review_id' is set
        if ($review_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $review_id when calling updateProductReview');
        }
        // verify the required parameter 'product_review' is set
        if ($product_review === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_review when calling updateProductReview');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/reviews/{review_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($review_id !== null) {
            $resourcePath = str_replace(
                "{" . "review_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($review_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product_review)) {
            $_tempBody = $product_review;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductReviewResponse',
                '/catalog/products/{product_id}/reviews/{review_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductReviewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductReviewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProductVideo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $video_id The ID of the &#x60;Video&#x60; that is being operated on. (required)
     * @param \BigCommerce\Api\v3\Model\ProductVideoPut $product_video A BigCommerce &#x60;ProductVideo&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\ProductVideoResponse
     */
    public function updateProductVideo($product_id, $video_id, $product_video)
    {
        list($response) = $this->updateProductVideoWithHttpInfo($product_id, $video_id, $product_video);
        return $response;
    }

    /**
     * Operation updateProductVideoWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param string $video_id The ID of the &#x60;Video&#x60; that is being operated on. (required)
     * @param \BigCommerce\Api\v3\Model\ProductVideoPut $product_video A BigCommerce &#x60;ProductVideo&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\ProductVideoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductVideoWithHttpInfo($product_id, $video_id, $product_video)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateProductVideo');
        }
        // verify the required parameter 'video_id' is set
        if ($video_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $video_id when calling updateProductVideo');
        }
        // verify the required parameter 'product_video' is set
        if ($product_video === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_video when calling updateProductVideo');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/videos/{video_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($video_id !== null) {
            $resourcePath = str_replace(
                "{" . "video_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($video_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product_video)) {
            $_tempBody = $product_video;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\ProductVideoResponse',
                '/catalog/products/{product_id}/videos/{video_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\ProductVideoResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ProductVideoResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateVariant
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param \BigCommerce\Api\v3\Model\VariantPut $variant A &#x60;Variant&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\VariantResponse
     */
    public function updateVariant($product_id, $variant_id, $variant)
    {
        list($response) = $this->updateVariantWithHttpInfo($product_id, $variant_id, $variant);
        return $response;
    }

    /**
     * Operation updateVariantWithHttpInfo
     *
     * 
     *
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param \BigCommerce\Api\v3\Model\VariantPut $variant A &#x60;Variant&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\VariantResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVariantWithHttpInfo($product_id, $variant_id, $variant)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateVariant');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling updateVariant');
        }
        // verify the required parameter 'variant' is set
        if ($variant === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant when calling updateVariant');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($variant)) {
            $_tempBody = $variant;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\VariantResponse',
                '/catalog/products/{product_id}/variants/{variant_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\VariantResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\VariantResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateVariantMetafield
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPut $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return \BigCommerce\Api\v3\Model\MetafieldResponse
     */
    public function updateVariantMetafield($metafield_id, $product_id, $variant_id, $metafield)
    {
        list($response) = $this->updateVariantMetafieldWithHttpInfo($metafield_id, $product_id, $variant_id, $metafield);
        return $response;
    }

    /**
     * Operation updateVariantMetafieldWithHttpInfo
     *
     * 
     *
     * @param int $metafield_id The ID of the &#x60;Metafield&#x60;. (required)
     * @param int $product_id The ID of the &#x60;Product&#x60; to which the resource belongs. (required)
     * @param int $variant_id ID of the variant on a product, or on an associated Price List Record. (required)
     * @param \BigCommerce\Api\v3\Model\MetafieldPut $metafield A &#x60;Metafield&#x60; object. (required)
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @return array of \BigCommerce\Api\v3\Model\MetafieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVariantMetafieldWithHttpInfo($metafield_id, $product_id, $variant_id, $metafield)
    {
        // verify the required parameter 'metafield_id' is set
        if ($metafield_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield_id when calling updateVariantMetafield');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling updateVariantMetafield');
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling updateVariantMetafield');
        }
        // verify the required parameter 'metafield' is set
        if ($metafield === null) {
            throw new \InvalidArgumentException('Missing the required parameter $metafield when calling updateVariantMetafield');
        }
        // parse inputs
        $resourcePath = "/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($metafield_id !== null) {
            $resourcePath = str_replace(
                "{" . "metafield_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($metafield_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($variant_id !== null) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($metafield)) {
            $_tempBody = $metafield;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\MetafieldResponse',
                '/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\MetafieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\MetafieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
