<?php
/**
 * CustomersApi
 *
 * @package  BigCommerce\Api\v3
 */

/**
 * BigCommerce API
 *
 * A Swagger Document for the BigCommmerce v3 API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\v3\Api;

use \BigCommerce\Api\v3\Configuration;
use \BigCommerce\Api\v3\ApiClient;
use \BigCommerce\Api\v3\ApiException;
use \BigCommerce\Api\v3\ObjectSerializer;

class CustomersApi
{

    /**
     * API Client
     *
     * @var \BigCommerce\Api\v3\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BigCommerce\Api\v3\ApiClient $apiClient The api client to use
     */
    public function __construct(\BigCommerce\Api\v3\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
    }

    /**
    * Get API client
    *
    * @return \BigCommerce\Api\v3\ApiClient get the API client
    */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
    * Set the API client
    *
    * @param \BigCommerce\Api\v3\ApiClient $apiClient set the API client
    *
    * @return CustomersApi
    */
    public function setApiClient(\BigCommerce\Api\v3\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createSubscriber
     * 
     *
     *
     * @param \BigCommerce\Api\v3\Model\SubscriberPost $subscriber &#x60;Subscriber&#x60; object. (required)
     * @param array $params = []
     * @return \BigCommerce\Api\v3\Model\SubscriberResponse
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createSubscriber($subscriber, array $params = [])
    {
        list($response) = $this->createSubscriberWithHttpInfo( $subscriber, $params);
        return $response;
    }


    /**
     * Operation createSubscriberWithHttpInfo
     *
     * @see self::createSubscriber()
     * @param \BigCommerce\Api\v3\Model\SubscriberPost $subscriber &#x60;Subscriber&#x60; object. (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\v3\Model\SubscriberResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubscriberWithHttpInfo( $subscriber, array $params = [])
    {
        
        // verify the required parameter 'subscriber' is set
        if (!isset($subscriber)) {
            throw new \InvalidArgumentException('Missing the required parameter $subscriber when calling createSubscriber');
        }
        

        // parse inputs
        $resourcePath = "/customers/subscribers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($subscriber)) {
        $_tempBody = $subscriber;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\SubscriberResponse',
                '/customers/subscribers'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\SubscriberResponse', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\SubscriberResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation deleteSubscriberById
     * 
     *
     *
     * @param int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param array $params = []
     * @return null
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function deleteSubscriberById($subscriber_id, array $params = [])
    {
        list($response) = $this->deleteSubscriberByIdWithHttpInfo($subscriber_id, $params);
        return $response;
    }


    /**
     * Operation deleteSubscriberByIdWithHttpInfo
     *
     * @see self::deleteSubscriberById()
     * @param int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubscriberByIdWithHttpInfo($subscriber_id, array $params = [])
    {
        
        // verify the required parameter 'subscriber_id' is set
        if (!isset($subscriber_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $subscriber_id when calling deleteSubscriberById');
        }
        

        // parse inputs
        $resourcePath = "/customers/subscribers/{subscriber_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($subscriber_id)) {
            $resourcePath = str_replace(
                "{" . "subscriber_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscriber_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/customers/subscribers/{subscriber_id}'
            );
            return [null, $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
     * Operation deleteSubscribers
     * 
     *
     *
     * @param array $params = []
     *     - email string Filter items by email. (optional)
     *     - first_name string Filter items by first_name. (optional)
     *     - last_name string Filter items by last_name. (optional)
     *     - source string Filter items by source. (optional)
     *     - order_id int Filter items by order_id. (optional)
     *     - date_created \DateTime Filter items by date_created. (optional)
     *     - date_modified \DateTime Filter items by date_modified. (optional)
     * @return null
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function deleteSubscribers(array $params = [])
    {
        list($response) = $this->deleteSubscribersWithHttpInfo($params);
        return $response;
    }


    /**
     * Operation deleteSubscribersWithHttpInfo
     *
     * @see self::deleteSubscribers()
     * @param array $params = []
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubscribersWithHttpInfo(array $params = [])
    {
        

        // parse inputs
        $resourcePath = "/customers/subscribers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/customers/subscribers'
            );
            return [null, $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
     * Operation getSubscriberById
     * 
     *
     *
     * @param int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param array $params = []
     * @return \BigCommerce\Api\v3\Model\SubscriberResponse
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getSubscriberById($subscriber_id, array $params = [])
    {
        list($response) = $this->getSubscriberByIdWithHttpInfo($subscriber_id, $params);
        return $response;
    }


    /**
     * Operation getSubscriberByIdWithHttpInfo
     *
     * @see self::getSubscriberById()
     * @param int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\v3\Model\SubscriberResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriberByIdWithHttpInfo($subscriber_id, array $params = [])
    {
        
        // verify the required parameter 'subscriber_id' is set
        if (!isset($subscriber_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $subscriber_id when calling getSubscriberById');
        }
        

        // parse inputs
        $resourcePath = "/customers/subscribers/{subscriber_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($subscriber_id)) {
            $resourcePath = str_replace(
                "{" . "subscriber_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscriber_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\SubscriberResponse',
                '/customers/subscribers/{subscriber_id}'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\SubscriberResponse', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\SubscriberResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation getSubscribers
     * 
     *
     *
     * @param array $params = []
     *     - email string Filter items by email. (optional)
     *     - first_name string Filter items by first_name. (optional)
     *     - last_name string Filter items by last_name. (optional)
     *     - source string Filter items by source. (optional)
     *     - order_id int Filter items by order_id. (optional)
     *     - date_created \DateTime Filter items by date_created. (optional)
     *     - date_modified \DateTime Filter items by date_modified. (optional)
     *     - page int Specifies the page number in a limited (paginated) list of products. (optional)
     *     - limit int Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @return \BigCommerce\Api\v3\Model\SubscriberCollectionResponse
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getSubscribers(array $params = [])
    {
        list($response) = $this->getSubscribersWithHttpInfo($params);
        return $response;
    }


    /**
     * Operation getSubscribersWithHttpInfo
     *
     * @see self::getSubscribers()
     * @param array $params = []
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\v3\Model\SubscriberCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscribersWithHttpInfo(array $params = [])
    {
        

        // parse inputs
        $resourcePath = "/customers/subscribers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\SubscriberCollectionResponse',
                '/customers/subscribers'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\SubscriberCollectionResponse', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\SubscriberCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation updateSubscriber
     * 
     *
     *
     * @param int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param \BigCommerce\Api\v3\Model\SubscriberPut $subscriber Returns a &#x60;Subscriber&#x60; object. (required)
     * @param array $params = []
     * @return \BigCommerce\Api\v3\Model\SubscriberResponse
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateSubscriber($subscriber_id, $subscriber, array $params = [])
    {
        list($response) = $this->updateSubscriberWithHttpInfo($subscriber_id,  $subscriber, $params);
        return $response;
    }


    /**
     * Operation updateSubscriberWithHttpInfo
     *
     * @see self::updateSubscriber()
     * @param int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param \BigCommerce\Api\v3\Model\SubscriberPut $subscriber Returns a &#x60;Subscriber&#x60; object. (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\v3\Model\SubscriberResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubscriberWithHttpInfo($subscriber_id,  $subscriber, array $params = [])
    {
        
        // verify the required parameter 'subscriber_id' is set
        if (!isset($subscriber_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $subscriber_id when calling updateSubscriber');
        }
        
        // verify the required parameter 'subscriber' is set
        if (!isset($subscriber)) {
            throw new \InvalidArgumentException('Missing the required parameter $subscriber when calling updateSubscriber');
        }
        

        // parse inputs
        $resourcePath = "/customers/subscribers/{subscriber_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($subscriber_id)) {
            $resourcePath = str_replace(
                "{" . "subscriber_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscriber_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($subscriber)) {
        $_tempBody = $subscriber;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\SubscriberResponse',
                '/customers/subscribers/{subscriber_id}'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\SubscriberResponse', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\SubscriberResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
}
