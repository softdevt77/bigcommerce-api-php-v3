<?php
/**
 * PriceListsApi
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BigCommerce API
 *
 * A Swagger Document for the BigCommmerce v3 API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\v3;

use \BigCommerce\Api\v3\Configuration;
use \BigCommerce\Api\v3\ApiClient;
use \BigCommerce\Api\v3\ApiException;
use \BigCommerce\Api\v3\ObjectSerializer;

/**
 * PriceListsApi Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PriceListsApi
{

    /**
     * API Client
     *
     * @var \BigCommerce\Api\v3\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BigCommerce\Api\v3\ApiClient $apiClient The api client to use
     */
    public function __construct(\BigCommerce\Api\v3\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
    }

    /**
    * Get API client
    *
    * @return \BigCommerce\Api\v3\ApiClient get the API client
    */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
    * Set the API client
    *
    * @param \BigCommerce\Api\v3\ApiClient $apiClient set the API client
    *
    * @return PriceListsApi
    */
    public function setApiClient(\BigCommerce\Api\v3\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Operation createPriceList
    * 
    *
    * @param \BigCommerce\Api\v3\Model\PriceListPost $price_list
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\PriceListResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function createPriceList(\BigCommerce\Api\v3\Model\PriceListPost $price_list, array $params = [])
    {
        
        // verify the required parameter 'price_list' is set
        if (!isset($price_list)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list when calling createPriceList');
        }

        // parse inputs
        $resourcePath = "/pricelists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($price_list)) {
        $_tempBody = $price_list;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceListResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceListResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceListResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation deletePriceList
    * 
    *
    * @param int $price_list_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deletePriceList($price_list_id, array $params = [])
    {
        
        // verify the required parameter 'price_list_id' is set
        if (!isset($price_list_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling deletePriceList');
        }

        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($price_list_id)) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deletePriceListRecord
    * 
    *
    * @param int $price_list_id
    * @param int $variant_id
    * @param int $currency_code
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deletePriceListRecord($price_list_id, $variant_id, $currency_code, array $params = [])
    {
        
        // verify the required parameter 'price_list_id' is set
        if (!isset($price_list_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling deletePriceListRecord');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling deletePriceListRecord');
        }
        // verify the required parameter 'currency_code' is set
        if (!isset($currency_code)) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling deletePriceListRecord');
        }

        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records/{variant_id}/{currency_code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($price_list_id)) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }

        // path params


        if (isset($currency_code)) {
            $resourcePath = str_replace(
                "{" . "currency_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($currency_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deletePriceListRecordsByFilter
    * 
    *
    * @param int $price_list_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\NoContent
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deletePriceListRecordsByFilter($price_list_id, array $params = [])
    {
        
        // verify the required parameter 'price_list_id' is set
        if (!isset($price_list_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling deletePriceListRecordsByFilter');
        }
        if (isset($params['variant_id'])) {
            $variant_id = $params['variant_id'];
        }

        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($variant_id)) {
            $queryParams['variant_id'] = $this->apiClient->getSerializer()->toQueryValue($variant_id);
        }
        // path params


        if (isset($price_list_id)) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\NoContent'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\NoContent', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 204:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NoContent', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation deletePriceListRecordsByVariantId
    * 
    *
    * @param int $price_list_id
    * @param int $variant_id
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deletePriceListRecordsByVariantId($price_list_id, $variant_id, array $params = [])
    {
        
        // verify the required parameter 'price_list_id' is set
        if (!isset($price_list_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling deletePriceListRecordsByVariantId');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling deletePriceListRecordsByVariantId');
        }

        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records/{variant_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($price_list_id)) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation deletePriceListsByFilter
    * 
    *
    * @param array $params = []
    * @return null
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function deletePriceListsByFilter(array $params = [])
    {
        
        if (isset($params['id'])) {
            $id = $params['id'];
        }
        if (isset($params['name'])) {
            $name = $params['name'];
        }

        // parse inputs
        $resourcePath = "/pricelists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($id)) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params

        if (isset($name)) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
    * Operation getPriceList
    * 
    *
    * @param int $price_list_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\PriceListResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getPriceList($price_list_id, array $params = [])
    {
        
        // verify the required parameter 'price_list_id' is set
        if (!isset($price_list_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling getPriceList');
        }

        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($price_list_id)) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceListResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceListResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceListResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getPriceListCollection
    * 
    *
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\PriceListCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getPriceListCollection(array $params = [])
    {
        
        if (isset($params['id'])) {
            $id = $params['id'];
        }
        if (isset($params['name'])) {
            $name = $params['name'];
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }

        // parse inputs
        $resourcePath = "/pricelists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($id)) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params

        if (isset($name)) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceListCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceListCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceListCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getPriceListRecord
    * 
    *
    * @param int $price_list_id
    * @param int $variant_id
    * @param int $currency_code
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\PriceRecordResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getPriceListRecord($price_list_id, $variant_id, $currency_code, array $params = [])
    {
        
        // verify the required parameter 'price_list_id' is set
        if (!isset($price_list_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling getPriceListRecord');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling getPriceListRecord');
        }
        // verify the required parameter 'currency_code' is set
        if (!isset($currency_code)) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling getPriceListRecord');
        }

        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records/{variant_id}/{currency_code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($price_list_id)) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }

        // path params


        if (isset($currency_code)) {
            $resourcePath = str_replace(
                "{" . "currency_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($currency_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceRecordResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceRecordResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceRecordResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getPriceListRecordCollection
    * 
    *
    * @param int $price_list_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\PriceRecordCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getPriceListRecordCollection($price_list_id, array $params = [])
    {
        
        // verify the required parameter 'price_list_id' is set
        if (!isset($price_list_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling getPriceListRecordCollection');
        }
        if (isset($params['variant_id'])) {
            $variant_id = $params['variant_id'];
        }
        if (isset($params['product_id'])) {
            $product_id = $params['product_id'];
        }
        if (isset($params['currency'])) {
            $currency = $params['currency'];
        }
        if (isset($params['page'])) {
            $page = $params['page'];
        }
        if (isset($params['limit'])) {
            $limit = $params['limit'];
        }

        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // query params

        if (isset($variant_id)) {
            $queryParams['variant_id'] = $this->apiClient->getSerializer()->toQueryValue($variant_id);
        }
        // query params

        if (isset($product_id)) {
            $queryParams['product_id'] = $this->apiClient->getSerializer()->toQueryValue($product_id);
        }
        // query params

        if (isset($currency)) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params

        if (isset($page)) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params

        if (isset($limit)) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // path params


        if (isset($price_list_id)) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceRecordCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceRecordCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceRecordCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation getPriceListRecordsByVariantId
    * 
    *
    * @param int $price_list_id
    * @param int $variant_id
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\PriceRecordCollectionResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function getPriceListRecordsByVariantId($price_list_id, $variant_id, array $params = [])
    {
        
        // verify the required parameter 'price_list_id' is set
        if (!isset($price_list_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling getPriceListRecordsByVariantId');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling getPriceListRecordsByVariantId');
        }

        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records/{variant_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($price_list_id)) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceRecordCollectionResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceRecordCollectionResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceRecordCollectionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation setPriceListRecord
    * 
    *
    * @param int $price_list_id
    * @param int $variant_id
    * @param int $currency_code
    * @param \BigCommerce\Api\v3\Model\PriceRecordPut $price_record
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\PriceRecordResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function setPriceListRecord($price_list_id, $variant_id, $currency_code, \BigCommerce\Api\v3\Model\PriceRecordPut $price_record, array $params = [])
    {
        
        // verify the required parameter 'price_list_id' is set
        if (!isset($price_list_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling setPriceListRecord');
        }
        // verify the required parameter 'variant_id' is set
        if (!isset($variant_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $variant_id when calling setPriceListRecord');
        }
        // verify the required parameter 'currency_code' is set
        if (!isset($currency_code)) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling setPriceListRecord');
        }
        // verify the required parameter 'price_record' is set
        if (!isset($price_record)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_record when calling setPriceListRecord');
        }

        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records/{variant_id}/{currency_code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($price_list_id)) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }

        // path params


        if (isset($variant_id)) {
            $resourcePath = str_replace(
                "{" . "variant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variant_id),
                $resourcePath
            );
        }

        // path params


        if (isset($currency_code)) {
            $resourcePath = str_replace(
                "{" . "currency_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($currency_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($price_record)) {
        $_tempBody = $price_record;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceRecordResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceRecordResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceRecordResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation setPriceListRecordCollection
    * 
    *
    * @param int $price_list_id
    * @param \BigCommerce\Api\v3\Model\PriceRecordCollectionPut $price_record_batch
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\SuccessBatchResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function setPriceListRecordCollection($price_list_id, \BigCommerce\Api\v3\Model\PriceRecordCollectionPut $price_record_batch, array $params = [])
    {
        
        // verify the required parameter 'price_list_id' is set
        if (!isset($price_list_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling setPriceListRecordCollection');
        }
        // verify the required parameter 'price_record_batch' is set
        if (!isset($price_record_batch)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_record_batch when calling setPriceListRecordCollection');
        }

        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}/records";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // header params

        if (isset($x_strict_mode)) {
            $headerParams['X-Strict-Mode'] = $this->apiClient->getSerializer()->toHeaderValue($x_strict_mode);
        }
        
        // path params


        if (isset($price_list_id)) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($price_record_batch)) {
        $_tempBody = $price_record_batch;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\SuccessBatchResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\SuccessBatchResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\SuccessBatchResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceRecordBatchErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
    * Operation updatePriceList
    * 
    *
    * @param int $price_list_id
    * @param \BigCommerce\Api\v3\Model\PriceListPut $price_list
    * @param array $params = []
    * @return \BigCommerce\Api\v3\Model\PriceListResponse
    * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
    */
    public function updatePriceList($price_list_id, \BigCommerce\Api\v3\Model\PriceListPut $price_list, array $params = [])
    {
        
        // verify the required parameter 'price_list_id' is set
        if (!isset($price_list_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id when calling updatePriceList');
        }
        // verify the required parameter 'price_list' is set
        if (!isset($price_list)) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list when calling updatePriceList');
        }

        // parse inputs
        $resourcePath = "/pricelists/{price_list_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);
        // path params


        if (isset($price_list_id)) {
            $resourcePath = str_replace(
                "{" . "price_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($price_list)) {
        $_tempBody = $price_list;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\v3\Model\PriceListResponse'
            );
            return $this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\PriceListResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\PriceListResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 404:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\NotFound', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 409:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
                case 422:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\ErrorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
}
