<?php
/**
 * CartApi
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BigCommerce API
 *
 * A Swagger Document for the BigCommmerce v3 API.
 *
 * OpenAPI spec version: 3.0.0b
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\v3;

use \BigCommerce\Api\v3\ApiClient;
use \BigCommerce\Api\v3\ApiException;
use \BigCommerce\Api\v3\Configuration;
use \BigCommerce\Api\v3\ObjectSerializer;

/**
 * CartApi Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CartApi
{
	/**
	 * API Client
	 *
	 * @var \BigCommerce\Api\v3\ApiClient instance of the ApiClient
	 */
	protected $apiClient;

	/**
	 * Constructor
	 *
	 * @param \BigCommerce\Api\v3\ApiClient|null $apiClient The api client to use
	 */
	public function __construct(\BigCommerce\Api\v3\ApiClient $apiClient = null)
	{
		if ($apiClient === null) {
			$apiClient = new ApiClient();
		}

		$this->apiClient = $apiClient;
	}

	/**
	 * Get API client
	 *
	 * @return \BigCommerce\Api\v3\ApiClient get the API client
	 */
	public function getApiClient()
	{
		return $this->apiClient;
	}

	/**
	 * Set the API client
	 *
	 * @param \BigCommerce\Api\v3\ApiClient $apiClient set the API client
	 *
	 * @return CartApi
	 */
	public function setApiClient(\BigCommerce\Api\v3\ApiClient $apiClient)
	{
		$this->apiClient = $apiClient;
		return $this;
	}

	/**
	 * Operation cartsCartIdGet
	 *
	 * @param string $cart_id The identifier of a specific cart. (required)
	 * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
	 * @return \BigCommerce\Api\v3\Model\CartResponse
	 */
	public function cartsCartIdGet($cart_id)
	{
		list($response) = $this->cartsCartIdGetWithHttpInfo($cart_id);
		return $response;
	}

	/**
	 * Operation cartsCartIdGetWithHttpInfo
	 *
	 * @param string $cart_id The identifier of a specific cart. (required)
	 * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
	 * @return array of \BigCommerce\Api\v3\Model\CartResponse, HTTP status code, HTTP response headers (array of strings)
	 */
	public function cartsCartIdGetWithHttpInfo($cart_id)
	{
		// verify the required parameter 'cart_id' is set
		if ($cart_id === null) {
			throw new \InvalidArgumentException('Missing the required parameter $cart_id when calling cartsCartIdGet');
		}
		// parse inputs
		$resourcePath = "/carts/{cartId}";
		$httpBody = '';
		$queryParams = [];
		$headerParams = [];
		$formParams = [];
		$_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
		if (!is_null($_header_accept)) {
			$headerParams['Accept'] = $_header_accept;
		}
		$headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

		// path params
		if ($cart_id !== null) {
			$resourcePath = str_replace(
				"{" . "cartId" . "}",
				$this->apiClient->getSerializer()->toPathValue($cart_id),
				$resourcePath
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			$httpBody = $_tempBody; // $_tempBody is the method argument, if present
		} elseif (count($formParams) > 0) {
			$httpBody = $formParams; // for HTTP post (form)
		}
		// make the API Call
		try {
			list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
				$resourcePath,
				'GET',
				$queryParams,
				$httpBody,
				$headerParams,
				'\BigCommerce\Api\v3\Model\CartResponse'
			);

			return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CartResponse', $httpHeader), $statusCode, $httpHeader];
		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CartResponse', $e->getResponseHeaders());
					$e->setResponseObject($data);
					break;
			}

			throw $e;
		}
	}

	/**
	 * Operation cartsCartIdItemsItemIdDelete
	 *
	 * @param string $cart_id  (required)
	 * @param string $item_id  (required)
	 * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
	 * @return \BigCommerce\Api\v3\Model\CartResponse
	 */
	public function cartsCartIdItemsItemIdDelete($cart_id, $item_id)
	{
		list($response) = $this->cartsCartIdItemsItemIdDeleteWithHttpInfo($cart_id, $item_id);
		return $response;
	}

	/**
	 * Operation cartsCartIdItemsItemIdDeleteWithHttpInfo
	 *
	 * @param string $cart_id  (required)
	 * @param string $item_id  (required)
	 * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
	 * @return array of \BigCommerce\Api\v3\Model\CartResponse, HTTP status code, HTTP response headers (array of strings)
	 */
	public function cartsCartIdItemsItemIdDeleteWithHttpInfo($cart_id, $item_id)
	{
		// verify the required parameter 'cart_id' is set
		if ($cart_id === null) {
			throw new \InvalidArgumentException('Missing the required parameter $cart_id when calling cartsCartIdItemsItemIdDelete');
		}
		// verify the required parameter 'item_id' is set
		if ($item_id === null) {
			throw new \InvalidArgumentException('Missing the required parameter $item_id when calling cartsCartIdItemsItemIdDelete');
		}
		// parse inputs
		$resourcePath = "/carts/{cartId}/items/{itemId}";
		$httpBody = '';
		$queryParams = [];
		$headerParams = [];
		$formParams = [];
		$_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
		if (!is_null($_header_accept)) {
			$headerParams['Accept'] = $_header_accept;
		}
		$headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

		// path params
		if ($cart_id !== null) {
			$resourcePath = str_replace(
				"{" . "cartId" . "}",
				$this->apiClient->getSerializer()->toPathValue($cart_id),
				$resourcePath
			);
		}
		// path params
		if ($item_id !== null) {
			$resourcePath = str_replace(
				"{" . "itemId" . "}",
				$this->apiClient->getSerializer()->toPathValue($item_id),
				$resourcePath
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			$httpBody = $_tempBody; // $_tempBody is the method argument, if present
		} elseif (count($formParams) > 0) {
			$httpBody = $formParams; // for HTTP post (form)
		}
		// make the API Call
		try {
			list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
				$resourcePath,
				'DELETE',
				$queryParams,
				$httpBody,
				$headerParams,
				'\BigCommerce\Api\v3\Model\CartResponse'
			);

			return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CartResponse', $httpHeader), $statusCode, $httpHeader];
		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CartResponse', $e->getResponseHeaders());
					$e->setResponseObject($data);
					break;
			}

			throw $e;
		}
	}

	/**
	 * Operation cartsCartIdItemsItemIdPut
	 *
	 * @param string $cart_id  (required)
	 * @param string $item_id  (required)
	 * @param \BigCommerce\Api\v3\Model\CartUpdateRequest $line_item  (required)
	 * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
	 * @return \BigCommerce\Api\v3\Model\CartResponse
	 */
	public function cartsCartIdItemsItemIdPut($cart_id, $item_id, $line_item)
	{
		list($response) = $this->cartsCartIdItemsItemIdPutWithHttpInfo($cart_id, $item_id, $line_item);
		return $response;
	}

	/**
	 * Operation cartsCartIdItemsItemIdPutWithHttpInfo
	 *
	 * @param string $cart_id  (required)
	 * @param string $item_id  (required)
	 * @param \BigCommerce\Api\v3\Model\CartUpdateRequest $line_item  (required)
	 * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
	 * @return array of \BigCommerce\Api\v3\Model\CartResponse, HTTP status code, HTTP response headers (array of strings)
	 */
	public function cartsCartIdItemsItemIdPutWithHttpInfo($cart_id, $item_id, $line_item)
	{
		// verify the required parameter 'cart_id' is set
		if ($cart_id === null) {
			throw new \InvalidArgumentException('Missing the required parameter $cart_id when calling cartsCartIdItemsItemIdPut');
		}
		// verify the required parameter 'item_id' is set
		if ($item_id === null) {
			throw new \InvalidArgumentException('Missing the required parameter $item_id when calling cartsCartIdItemsItemIdPut');
		}
		// verify the required parameter 'line_item' is set
		if ($line_item === null) {
			throw new \InvalidArgumentException('Missing the required parameter $line_item when calling cartsCartIdItemsItemIdPut');
		}
		// parse inputs
		$resourcePath = "/carts/{cartId}/items/{itemId}";
		$httpBody = '';
		$queryParams = [];
		$headerParams = [];
		$formParams = [];
		$_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
		if (!is_null($_header_accept)) {
			$headerParams['Accept'] = $_header_accept;
		}
		$headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

		// path params
		if ($cart_id !== null) {
			$resourcePath = str_replace(
				"{" . "cartId" . "}",
				$this->apiClient->getSerializer()->toPathValue($cart_id),
				$resourcePath
			);
		}
		// path params
		if ($item_id !== null) {
			$resourcePath = str_replace(
				"{" . "itemId" . "}",
				$this->apiClient->getSerializer()->toPathValue($item_id),
				$resourcePath
			);
		}
		// body params
		$_tempBody = null;
		if (isset($line_item)) {
			$_tempBody = $line_item;
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			$httpBody = $_tempBody; // $_tempBody is the method argument, if present
		} elseif (count($formParams) > 0) {
			$httpBody = $formParams; // for HTTP post (form)
		}
		// make the API Call
		try {
			list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
				$resourcePath,
				'PUT',
				$queryParams,
				$httpBody,
				$headerParams,
				'\BigCommerce\Api\v3\Model\CartResponse'
			);

			return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CartResponse', $httpHeader), $statusCode, $httpHeader];
		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CartResponse', $e->getResponseHeaders());
					$e->setResponseObject($data);
					break;
			}

			throw $e;
		}
	}

	/**
	 * Operation cartsCartIdItemsPost
	 *
	 * @param string $cart_id  (required)
	 * @param \BigCommerce\Api\v3\Model\CartRequestData $item_data  (required)
	 * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
	 * @return \BigCommerce\Api\v3\Model\CartResponse
	 */
	public function cartsCartIdItemsPost($cart_id, $item_data)
	{
		list($response) = $this->cartsCartIdItemsPostWithHttpInfo($cart_id, $item_data);
		return $response;
	}

	/**
	 * Operation cartsCartIdItemsPostWithHttpInfo
	 *
	 * @param string $cart_id  (required)
	 * @param \BigCommerce\Api\v3\Model\CartRequestData $item_data  (required)
	 * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
	 * @return array of \BigCommerce\Api\v3\Model\CartResponse, HTTP status code, HTTP response headers (array of strings)
	 */
	public function cartsCartIdItemsPostWithHttpInfo($cart_id, $item_data)
	{
		// verify the required parameter 'cart_id' is set
		if ($cart_id === null) {
			throw new \InvalidArgumentException('Missing the required parameter $cart_id when calling cartsCartIdItemsPost');
		}
		// verify the required parameter 'item_data' is set
		if ($item_data === null) {
			throw new \InvalidArgumentException('Missing the required parameter $item_data when calling cartsCartIdItemsPost');
		}
		// parse inputs
		$resourcePath = "/carts/{cartId}/items";
		$httpBody = '';
		$queryParams = [];
		$headerParams = [];
		$formParams = [];
		$_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
		if (!is_null($_header_accept)) {
			$headerParams['Accept'] = $_header_accept;
		}
		$headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

		// path params
		if ($cart_id !== null) {
			$resourcePath = str_replace(
				"{" . "cartId" . "}",
				$this->apiClient->getSerializer()->toPathValue($cart_id),
				$resourcePath
			);
		}
		// body params
		$_tempBody = null;
		if (isset($item_data)) {
			$_tempBody = $item_data;
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			$httpBody = $_tempBody; // $_tempBody is the method argument, if present
		} elseif (count($formParams) > 0) {
			$httpBody = $formParams; // for HTTP post (form)
		}
		// make the API Call
		try {
			list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
				$resourcePath,
				'POST',
				$queryParams,
				$httpBody,
				$headerParams,
				'\BigCommerce\Api\v3\Model\CartResponse'
			);

			return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CartResponse', $httpHeader), $statusCode, $httpHeader];
		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 201:
					$data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CartResponse', $e->getResponseHeaders());
					$e->setResponseObject($data);
					break;
			}

			throw $e;
		}
	}

	/**
	 * Operation cartsCartIdRedirectUrlsPost
	 *
	 * @param string $cart_id  (required)
	 * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
	 * @return \BigCommerce\Api\v3\Model\CartRedirectUrlsResponse
	 */
	public function cartsCartIdRedirectUrlsPost($cart_id)
	{
		list($response) = $this->cartsCartIdRedirectUrlsPostWithHttpInfo($cart_id);
		return $response;
	}

	/**
	 * Operation cartsCartIdRedirectUrlsPostWithHttpInfo
	 *
	 * @param string $cart_id  (required)
	 * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
	 * @return array of \BigCommerce\Api\v3\Model\CartRedirectUrlsResponse, HTTP status code, HTTP response headers (array of strings)
	 */
	public function cartsCartIdRedirectUrlsPostWithHttpInfo($cart_id)
	{
		// verify the required parameter 'cart_id' is set
		if ($cart_id === null) {
			throw new \InvalidArgumentException('Missing the required parameter $cart_id when calling cartsCartIdRedirectUrlsPost');
		}
		// parse inputs
		$resourcePath = "/carts/{cartId}/redirect_urls";
		$httpBody = '';
		$queryParams = [];
		$headerParams = [];
		$formParams = [];
		$_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
		if (!is_null($_header_accept)) {
			$headerParams['Accept'] = $_header_accept;
		}
		$headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

		// path params
		if ($cart_id !== null) {
			$resourcePath = str_replace(
				"{" . "cartId" . "}",
				$this->apiClient->getSerializer()->toPathValue($cart_id),
				$resourcePath
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			$httpBody = $_tempBody; // $_tempBody is the method argument, if present
		} elseif (count($formParams) > 0) {
			$httpBody = $formParams; // for HTTP post (form)
		}
		// make the API Call
		try {
			list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
				$resourcePath,
				'POST',
				$queryParams,
				$httpBody,
				$headerParams,
				'\BigCommerce\Api\v3\Model\CartRedirectUrlsResponse'
			);

			return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CartRedirectUrlsResponse', $httpHeader), $statusCode, $httpHeader];
		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 201:
					$data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CartRedirectUrlsResponse', $e->getResponseHeaders());
					$e->setResponseObject($data);
					break;
			}

			throw $e;
		}
	}

	/**
	 * Operation cartsPost
	 *
	 * @param \BigCommerce\Api\v3\Model\CartRequestData $cart_data  (required)
	 * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
	 * @return \BigCommerce\Api\v3\Model\CartResponse
	 */
	public function cartsPost($cart_data)
	{
		list($response) = $this->cartsPostWithHttpInfo($cart_data);
		return $response;
	}

	/**
	 * Operation cartsPostWithHttpInfo
	 *
	 * @param \BigCommerce\Api\v3\Model\CartRequestData $cart_data  (required)
	 * @throws \BigCommerce\Api\v3\ApiException on non-2xx response
	 * @return array of \BigCommerce\Api\v3\Model\CartResponse, HTTP status code, HTTP response headers (array of strings)
	 */
	public function cartsPostWithHttpInfo($cart_data)
	{
		// verify the required parameter 'cart_data' is set
		if ($cart_data === null) {
			throw new \InvalidArgumentException('Missing the required parameter $cart_data when calling cartsPost');
		}
		// parse inputs
		$resourcePath = "/carts";
		$httpBody = '';
		$queryParams = [];
		$headerParams = [];
		$formParams = [];
		$_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
		if (!is_null($_header_accept)) {
			$headerParams['Accept'] = $_header_accept;
		}
		$headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

		// body params
		$_tempBody = null;
		if (isset($cart_data)) {
			$_tempBody = $cart_data;
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			$httpBody = $_tempBody; // $_tempBody is the method argument, if present
		} elseif (count($formParams) > 0) {
			$httpBody = $formParams; // for HTTP post (form)
		}
		// make the API Call
		try {
			list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
				$resourcePath,
				'POST',
				$queryParams,
				$httpBody,
				$headerParams,
				'\BigCommerce\Api\v3\Model\CartResponse'
			);

			return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\v3\Model\CartResponse', $httpHeader), $statusCode, $httpHeader];
		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 201:
					$data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\v3\Model\CartResponse', $e->getResponseHeaders());
					$e->setResponseObject($data);
					break;
			}

			throw $e;
		}
	}
}
