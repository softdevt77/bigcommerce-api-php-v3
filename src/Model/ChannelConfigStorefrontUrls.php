<?php
/**
 * ChannelConfigStorefrontUrls
 *
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BigCommerce Channels API
 *
 * The Channels API enables you to create and manage listings across a BigCommerce merchant's sales channels.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\v3\Model;

use \ArrayAccess;

/**
 * ChannelConfigStorefrontUrls Class Doc Comment
 *
 * @category    Class */
/**
 * @package     BigCommerce\Api\v3
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChannelConfigStorefrontUrls implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Channel_config_storefront_urls';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cart' => 'string',
        'home' => 'string',
        'login' => 'string',
        'register' => 'string',
        'account' => 'string',
        'shipping_returns' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'cart' => 'cart',
        'home' => 'home',
        'login' => 'login',
        'register' => 'register',
        'account' => 'account',
        'shipping_returns' => 'shipping_returns'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'cart' => 'setCart',
        'home' => 'setHome',
        'login' => 'setLogin',
        'register' => 'setRegister',
        'account' => 'setAccount',
        'shipping_returns' => 'setShippingReturns'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'cart' => 'getCart',
        'home' => 'getHome',
        'login' => 'getLogin',
        'register' => 'getRegister',
        'account' => 'getAccount',
        'shipping_returns' => 'getShippingReturns'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cart'] = isset($data['cart']) ? $data['cart'] : null;
        $this->container['home'] = isset($data['home']) ? $data['home'] : null;
        $this->container['login'] = isset($data['login']) ? $data['login'] : null;
        $this->container['register'] = isset($data['register']) ? $data['register'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['shipping_returns'] = isset($data['shipping_returns']) ? $data['shipping_returns'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets cart
     * @return string
     */
    public function getCart()
    {
        return $this->container['cart'];
    }

    /**
     * Sets cart
     * @param string $cart
     * @return $this
     */
    public function setCart($cart)
    {
        $this->container['cart'] = $cart;

        return $this;
    }

    /**
     * Gets home
     * @return string
     */
    public function getHome()
    {
        return $this->container['home'];
    }

    /**
     * Sets home
     * @param string $home
     * @return $this
     */
    public function setHome($home)
    {
        $this->container['home'] = $home;

        return $this;
    }

    /**
     * Gets login
     * @return string
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     * @param string $login
     * @return $this
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets register
     * @return string
     */
    public function getRegister()
    {
        return $this->container['register'];
    }

    /**
     * Sets register
     * @param string $register
     * @return $this
     */
    public function setRegister($register)
    {
        $this->container['register'] = $register;

        return $this;
    }

    /**
     * Gets account
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     * @param string $account
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets shipping_returns
     * @return string
     */
    public function getShippingReturns()
    {
        return $this->container['shipping_returns'];
    }

    /**
     * Sets shipping_returns
     * @param string $shipping_returns
     * @return $this
     */
    public function setShippingReturns($shipping_returns)
    {
        $this->container['shipping_returns'] = $shipping_returns;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BigCommerce\Api\v3\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BigCommerce\Api\v3\ObjectSerializer::sanitizeForSerialization($this));
    }
}


