<?php
/**
 * Route
 *
 * @package  BigCommerce\Api\v3
 */

/**
 * Sites & Routes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\v3\Model;

use \ArrayAccess;

class Route implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Route';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'type' => 'string',
        'matching' => 'string',
        'route' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'matching' => 'matching',
        'route' => 'route'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'matching' => 'setMatching',
        'route' => 'setRoute'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'matching' => 'getMatching',
        'route' => 'getRoute'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_PRODUCT = 'product';
    const TYPE_BRAND = 'brand';
    const TYPE_CATEGORY = 'category';
    const TYPE_PAGE = 'page';
    const TYPE_BLOG = 'blog';
    const TYPE_HOME = 'home';
    const TYPE_CART = 'cart';
    const TYPE_CHECKOUT = 'checkout';
    const TYPE_SEARCH = 'search';
    const TYPE_ACCOUNT = 'account';
    const TYPE_LOGIN = 'login';
    const TYPE_RETURNS = 'returns';
    const TYPE_STATIC = 'static';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PRODUCT,
            self::TYPE_BRAND,
            self::TYPE_CATEGORY,
            self::TYPE_PAGE,
            self::TYPE_BLOG,
            self::TYPE_HOME,
            self::TYPE_CART,
            self::TYPE_CHECKOUT,
            self::TYPE_SEARCH,
            self::TYPE_ACCOUNT,
            self::TYPE_LOGIN,
            self::TYPE_RETURNS,
            self::TYPE_STATIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = [])
    {
        $this->container['id'] = array_key_exists('id', $data) ? $data['id'] : null;
        $this->container['type'] = array_key_exists('type', $data) ? $data['type'] : null;
        $this->container['matching'] = array_key_exists('matching', $data) ? $data['matching'] : null;
        $this->container['route'] = array_key_exists('route', $data) ? $data['route'] : null;
    }

    /**
     * returns container
     * @return array
     */
    public function get()
    {
        return $this->container;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["product", "brand", "category", "page", "blog", "home", "cart", "checkout", "search", "account", "login", "returns", "static"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["product", "brand", "category", "page", "blog", "home", "cart", "checkout", "search", "account", "login", "returns", "static"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Unique ID for this route
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type What type of resource are we routing to?
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = ['product', 'brand', 'category', 'page', 'blog', 'home', 'cart', 'checkout', 'search', 'account', 'login', 'returns', 'static'];
        if (!is_null($type) && (!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'product', 'brand', 'category', 'page', 'blog', 'home', 'cart', 'checkout', 'search', 'account', 'login', 'returns', 'static'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets matching
     * @return string
     */
    public function getMatching()
    {
        return $this->container['matching'];
    }

    /**
     * Sets matching
     * @param string $matching (entity_id?) For a given type, which resources should match this route? e.g For a route with the type: \"product\" and matching: \"5\" this route would be used for the product with the ID of 5.  Depending on the type of resource, this may be an ID (matching a specific item), or a \"*\" wildcard matching all items of that type.
     * @return $this
     */
    public function setMatching($matching)
    {
        $this->container['matching'] = $matching;

        return $this;
    }

    /**
     * Gets route
     * @return string
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     * @param string $route The route template that will be used to generate the URL for the requested resource.  Supports several tokens:  - {id} The ID of the requested item - {slug} The slug for the requested item (if available). Note: the `slug` value may contain `/` slash - {language} The language string that the client is using
     * @return $this
     */
    public function setRoute($route)
    {
        $this->container['route'] = $route;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BigCommerce\Api\v3\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BigCommerce\Api\v3\ObjectSerializer::sanitizeForSerialization($this));
    }
}


