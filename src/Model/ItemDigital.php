<?php
/**
 * ItemDigital
 *
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Api\v3
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BigCommerce API
 *
 * A Swagger Document for the BigCommmerce v3 API.
 *
 * OpenAPI spec version: 3.0.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\v3\Model;

use \ArrayAccess;

/**
 * ItemDigital Class Doc Comment
 *
 * @category    Class
 * @package     BigCommerce\Api\v3
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ItemDigital extends BaseItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ItemDigital';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'download_file_urls' => 'string[]',
        'download_page_url' => 'string',
        'download_size' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'download_file_urls' => 'url',
        'download_page_url' => 'url',
        'download_size' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'download_file_urls' => 'download_file_urls',
        'download_page_url' => 'download_page_url',
        'download_size' => 'download_size'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'download_file_urls' => 'setDownloadFileUrls',
        'download_page_url' => 'setDownloadPageUrl',
        'download_size' => 'setDownloadSize'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'download_file_urls' => 'getDownloadFileUrls',
        'download_page_url' => 'getDownloadPageUrl',
        'download_size' => 'getDownloadSize'
    ];

    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['download_file_urls'] = isset($data['download_file_urls']) ? $data['download_file_urls'] : null;
        $this->container['download_page_url'] = isset($data['download_page_url']) ? $data['download_page_url'] : null;
        $this->container['download_size'] = isset($data['download_size']) ? $data['download_size'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = parent::listInvalidProperties();

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        return true;
    }


    /**
     * Gets download_file_urls
     * @return string[]
     */
    public function getDownloadFileUrls()
    {
        return $this->container['download_file_urls'];
    }

    /**
     * Sets download_file_urls
     * @param string[] $download_file_urls URLs to download all product files.
     * @return $this
     */
    public function setDownloadFileUrls($download_file_urls)
    {
        $this->container['download_file_urls'] = $download_file_urls;

        return $this;
    }

    /**
     * Gets download_page_url
     * @return string
     */
    public function getDownloadPageUrl()
    {
        return $this->container['download_page_url'];
    }

    /**
     * Sets download_page_url
     * @param string $download_page_url The combined downloads-page URL.
     * @return $this
     */
    public function setDownloadPageUrl($download_page_url)
    {
        $this->container['download_page_url'] = $download_page_url;

        return $this;
    }

    /**
     * Gets download_size
     * @return string
     */
    public function getDownloadSize()
    {
        return $this->container['download_size'];
    }

    /**
     * Sets download_size
     * @param string $download_size Combined download size, in human-readable style. E.g.: `30MB`.
     * @return $this
     */
    public function setDownloadSize($download_size)
    {
        $this->container['download_size'] = $download_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BigCommerce\Api\v3\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BigCommerce\Api\v3\ObjectSerializer::sanitizeForSerialization($this));
    }
}


